<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一杯咖啡的时间</title>
  
  <subtitle>苦中作乐</subtitle>
  <link href="http://blog.jobshen.com/atom.xml" rel="self"/>
  
  <link href="http://blog.jobshen.com/"/>
  <updated>2021-02-17T04:24:14.000Z</updated>
  <id>http://blog.jobshen.com/</id>
  
  <author>
    <name>Job Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Filebeat 浅析（二）</title>
    <link href="http://blog.jobshen.com/posts/5be0aa9e.html"/>
    <id>http://blog.jobshen.com/posts/5be0aa9e.html</id>
    <published>2021-02-17T04:24:14.000Z</published>
    <updated>2021-02-17T04:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说完了<code>filebeat</code>的基础架构和相关设计后，我们就来看下<code>filebeat</code>是如何来实现这些功能的。这里只对几个相对来说比较重要的几个流程进行讨论。其余的设计会在之后的文章中进行阐述。几个流程为：</p><ul><li>启动过程</li><li>harvester 监听过程（以log为例）</li><li>outputs 处理流程（以kafka为例）</li></ul><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>首先当然是找到入口函数，对于<code>go</code>应用来说很简单，直接找<code>main()</code>就可以了。因此我们可以看到：<code>beats/filebeat/main.go</code>的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"os"</span><span class="token string">"github.com/elastic/beats/v7/filebeat/cmd"</span>inputs <span class="token string">"github.com/elastic/beats/v7/filebeat/input/default-inputs"</span><span class="token punctuation">)</span><span class="token comment">// The basic model of execution:</span><span class="token comment">// - input: finds files in paths/globs to harvest, starts harvesters</span><span class="token comment">// - harvester: reads a file, sends events to the spooler</span><span class="token comment">// - spooler: buffers events until ready to flush to the publisher</span><span class="token comment">// - publisher: writes to the network, notifies registrar</span><span class="token comment">// - registrar: records positions of files read</span><span class="token comment">// Finally, input uses the registrar information, on restart, to</span><span class="token comment">// determine where in each file to restart a harvester.</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Filebeat</span><span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>Init<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>ipnuts.Init</code>是用来获取该<code>filebeat</code>在之前的一些状态信息或者初始化一份状态信息，主要是用来记录目前<code>harvester</code>已监听到、采集到的<code>offset</code>相关信息。<code>cmd.Filebeat</code>用来初始化一个<code>Filebeat</code>对象。<code>cmd.root.Filebeat()</code>，加载&amp;初始化相关的配置，以及构建<code>filebeat</code>对象。下面代码里的<code>beater.New</code>方法会构建了<code>filebeat</code>对象。<code>GenRootCmdWithSettings</code>方法内会构建启动<code>filebeat</code>相关命令。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Filebeat build the beat root command for executing filebeat and it's subcommands.</span><span class="token keyword">func</span> <span class="token function">Filebeat</span><span class="token punctuation">(</span>inputs beater<span class="token punctuation">.</span>PluginFactory<span class="token punctuation">)</span> <span class="token operator">*</span>cmd<span class="token punctuation">.</span>BeatsRootCmd <span class="token punctuation">&#123;</span><span class="token keyword">var</span> runFlags <span class="token operator">=</span> pflag<span class="token punctuation">.</span><span class="token function">NewFlagSet</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> pflag<span class="token punctuation">.</span>ExitOnError<span class="token punctuation">)</span>runFlags<span class="token punctuation">.</span><span class="token function">AddGoFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>runFlags<span class="token punctuation">.</span><span class="token function">AddGoFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>settings <span class="token operator">:=</span> instance<span class="token punctuation">.</span>Settings<span class="token punctuation">&#123;</span>RunFlags<span class="token punctuation">:</span>      runFlags<span class="token punctuation">,</span>Name<span class="token punctuation">:</span>          Name<span class="token punctuation">,</span>HasDashboards<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 主要是这行代码</span>command <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">GenRootCmdWithSettings</span><span class="token punctuation">(</span>beater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> settings<span class="token punctuation">)</span>  command<span class="token punctuation">.</span><span class="token function">PersistentFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGoFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>command<span class="token punctuation">.</span>TestCmd<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGoFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>command<span class="token punctuation">.</span>SetupCmd<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddGoFlag</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>command<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">GenModulesCmd</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> buildModulesManager<span class="token punctuation">)</span><span class="token punctuation">)</span>command<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">genGenerateCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> command<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GenRootCmdWithSettings</code>函数在<code>filebeat/libbeat/cmd/root.go</code>文件内。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GenRootCmdWithSettings</span><span class="token punctuation">(</span>beatCreator beat<span class="token punctuation">.</span>Creator<span class="token punctuation">,</span> settings instance<span class="token punctuation">.</span>Settings<span class="token punctuation">)</span> <span class="token operator">*</span>BeatsRootCmd <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  rootCmd<span class="token punctuation">.</span>RunCmd <span class="token operator">=</span> <span class="token function">genRunCmd</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> beatCreator<span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">return</span> rootCmd<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此函数内会调用<code>filebeat/libbeat/cmd/run.go</code>文件内的<code>func genRunCmd(settings instance.Settings, beatCreator beat.Creator) *cobra.Command</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">genRunCmd</span><span class="token punctuation">(</span>settings instance<span class="token punctuation">.</span>Settings<span class="token punctuation">,</span> beatCreator beat<span class="token punctuation">.</span>Creator<span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">&#123;</span>name <span class="token operator">:=</span> settings<span class="token punctuation">.</span>NamerunCmd <span class="token operator">:=</span> cobra<span class="token punctuation">.</span>Command<span class="token punctuation">&#123;</span>Use<span class="token punctuation">:</span>   <span class="token string">"run"</span><span class="token punctuation">,</span>Short<span class="token punctuation">:</span> <span class="token string">"Run "</span> <span class="token operator">+</span> name<span class="token punctuation">,</span>Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> instance<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> beatCreator<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据方法名字就能关注到重点</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">instance<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> beatCreator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Run</code>方法内会构建<code>Beat</code>对象，并调用<code>launch</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run initializes and runs a Beater implementation. name is the name of the</span><span class="token comment">// Beat (e.g. packetbeat or metricbeat). version is version number of the Beater</span><span class="token comment">// implementation. bt is the `Creator` callback for creating a new beater</span><span class="token comment">// instance.</span><span class="token comment">// XXX Move this as a *Beat method?</span><span class="token keyword">func</span> <span class="token function">Run</span><span class="token punctuation">(</span>settings Settings<span class="token punctuation">,</span> bt beat<span class="token punctuation">.</span>Creator<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewBeat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> idxPrefix<span class="token punctuation">,</span> version<span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> bt<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>launch</code>方法内又构建了<code>Beater</code>对象(<code>Beater</code>是个接口)，并且在最后调用了<code>Beater</code>接口的<code>Run</code>方法启动。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Beat<span class="token punctuation">)</span> <span class="token function">launch</span><span class="token punctuation">(</span>settings Settings<span class="token punctuation">,</span> bt beat<span class="token punctuation">.</span>Creator<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>beater<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">createBeater</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">return</span> beater<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>Beat<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个接口有多个实现，但是我们这里只需要关注一个，文件<code>filebeat/beater/filebeat.go</code>文件内的<code>Run</code>方法，这里就是启动<code>filebeat</code>的实现。</p><p>在<code>Run</code>方法内，会构建一个<code>crawler</code>对象，此对象用来采集数据，工作原理其实是对<code>Inputs</code>的包装，<code>Inputs</code>就是<code>filebeat</code>官网介绍的核心组件之一。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run allows the beater to be run as a beat.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb <span class="token operator">*</span>Filebeat<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>b <span class="token operator">*</span>beat<span class="token punctuation">.</span>Beat<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> err <span class="token builtin">error</span>config <span class="token operator">:=</span> fb<span class="token punctuation">.</span>config<span class="token keyword">if</span> <span class="token operator">!</span>fb<span class="token punctuation">.</span>moduleRegistry<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">=</span> fb<span class="token punctuation">.</span><span class="token function">loadModulesPipelines</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 构建相关统计信息的chan</span>waitFinished <span class="token operator">:=</span> <span class="token function">newSignalWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>waitEvents <span class="token operator">:=</span> <span class="token function">newSignalWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// count active events for waiting on shutdown</span>wgEvents <span class="token operator">:=</span> <span class="token operator">&amp;</span>eventCounter<span class="token punctuation">&#123;</span>count<span class="token punctuation">:</span> monitoring<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"filebeat.events.active"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>added<span class="token punctuation">:</span> monitoring<span class="token punctuation">.</span><span class="token function">NewUint</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"filebeat.events.added"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>done<span class="token punctuation">:</span>  monitoring<span class="token punctuation">.</span><span class="token function">NewUint</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"filebeat.events.done"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>finishedLogger <span class="token operator">:=</span> <span class="token function">newFinishedLogger</span><span class="token punctuation">(</span>wgEvents<span class="token punctuation">)</span>registryMigrator <span class="token operator">:=</span> registrar<span class="token punctuation">.</span><span class="token function">NewMigrator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Registry<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> registryMigrator<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Failed to migrate registry file: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>  <span class="token comment">// input 对于file的 相关进度信息，offset等</span>stateStore<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">openStateStore</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> logp<span class="token punctuation">.</span><span class="token function">NewLogger</span><span class="token punctuation">(</span><span class="token string">"filebeat"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>Registry<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Failed to open state store: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">defer</span> stateStore<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 构建一个register 用以保存相关数据</span><span class="token comment">// Setup registrar to persist state</span>registrar<span class="token punctuation">,</span> err <span class="token operator">:=</span> registrar<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>stateStore<span class="token punctuation">,</span> finishedLogger<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Registry<span class="token punctuation">.</span>FlushTimeout<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Could not init registrar: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// Make sure all events that were published in</span>registrarChannel <span class="token operator">:=</span> <span class="token function">newRegistrarLogger</span><span class="token punctuation">(</span>registrar<span class="token punctuation">)</span>  <span class="token comment">// 构建相关pipeline，internal queu，将上下游形成一个闭环</span>  <span class="token comment">// input --> harvester --> event --> processors --> queue --> publisher --> outputs</span><span class="token comment">// setup event counting for startup and a global common ACKer, such that all events will be</span><span class="token comment">// routed to the reigstrar after they've been ACKed.</span><span class="token comment">// Events with Private==nil or the type of private != file.State are directly</span><span class="token comment">// forwarded to `finishedLogger`. Events from the `logs` input will first be forwarded</span><span class="token comment">// to the registrar via `registrarChannel`, which finally forwards the events to finishedLogger as well.</span><span class="token comment">// The finishedLogger decrements the counters in wgEvents after all events have been securely processed</span><span class="token comment">// by the registry.</span>fb<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> <span class="token function">withPipelineEventCounter</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Publisher<span class="token punctuation">,</span> wgEvents<span class="token punctuation">)</span>fb<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> pipetool<span class="token punctuation">.</span><span class="token function">WithACKer</span><span class="token punctuation">(</span>fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">,</span> <span class="token function">eventACKer</span><span class="token punctuation">(</span>finishedLogger<span class="token punctuation">,</span> registrarChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Filebeat by default required infinite retry. Let's configure this for all</span><span class="token comment">// inputs by default.  Inputs (and InputController) can overwrite the sending</span><span class="token comment">// guarantees explicitly when connecting with the pipeline.</span>fb<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> pipetool<span class="token punctuation">.</span><span class="token function">WithDefaultGuarantees</span><span class="token punctuation">(</span>fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">,</span> beat<span class="token punctuation">.</span>GuaranteedSend<span class="token punctuation">)</span>outDone <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// outDone closes down all active pipeline connections</span>pipelineConnector <span class="token operator">:=</span> channel<span class="token punctuation">.</span><span class="token function">NewOutletFactory</span><span class="token punctuation">(</span>outDone<span class="token punctuation">)</span><span class="token punctuation">.</span>Create<span class="token comment">// Create a ES connection factory for dynamic modules pipeline loading</span><span class="token keyword">var</span> pipelineLoaderFactory fileset<span class="token punctuation">.</span>PipelineLoaderFactory<span class="token keyword">if</span> b<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"elasticsearch"</span> <span class="token punctuation">&#123;</span>pipelineLoaderFactory <span class="token operator">=</span> <span class="token function">newPipelineLoaderFactory</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span>pipelinesWarning<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>inputsLogger <span class="token operator">:=</span> logp<span class="token punctuation">.</span><span class="token function">NewLogger</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span>v2Inputs <span class="token operator">:=</span> fb<span class="token punctuation">.</span><span class="token function">pluginFactory</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> inputsLogger<span class="token punctuation">,</span> stateStore<span class="token punctuation">)</span>v2InputLoader<span class="token punctuation">,</span> err <span class="token operator">:=</span> v2<span class="token punctuation">.</span><span class="token function">NewLoader</span><span class="token punctuation">(</span>inputsLogger<span class="token punctuation">,</span> v2Inputs<span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>DefaultType<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// loader detected invalid state.</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> inputTaskGroup unison<span class="token punctuation">.</span>TaskGroup<span class="token keyword">defer</span> inputTaskGroup<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> v2InputLoader<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inputTaskGroup<span class="token punctuation">,</span> v2<span class="token punctuation">.</span>ModeRun<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Failed to initialize the input managers: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>inputLoader <span class="token operator">:=</span> channel<span class="token punctuation">.</span><span class="token function">RunnerFactoryWithCommonInputSettings</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> compat<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>compat<span class="token punctuation">.</span><span class="token function">RunnerFactory</span><span class="token punctuation">(</span>inputsLogger<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> v2InputLoader<span class="token punctuation">)</span><span class="token punctuation">,</span>input<span class="token punctuation">.</span><span class="token function">NewRunnerFactory</span><span class="token punctuation">(</span>pipelineConnector<span class="token punctuation">,</span> registrar<span class="token punctuation">,</span> fb<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>moduleLoader <span class="token operator">:=</span> fileset<span class="token punctuation">.</span><span class="token function">NewFactory</span><span class="token punctuation">(</span>inputLoader<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> pipelineLoaderFactory<span class="token punctuation">,</span> config<span class="token punctuation">.</span>OverwritePipelines<span class="token punctuation">)</span>  <span class="token comment">// input 相关</span>crawler<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newCrawler</span><span class="token punctuation">(</span>inputLoader<span class="token punctuation">,</span> moduleLoader<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Inputs<span class="token punctuation">,</span> fb<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token operator">*</span>once<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Could not init crawler: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// The order of starting and stopping is important. Stopping is inverted to the starting order.</span><span class="token comment">// The current order is: registrar, publisher, spooler, crawler</span><span class="token comment">// That means, crawler is stopped first.</span><span class="token comment">// Start the registrar</span>err <span class="token operator">=</span> registrar<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Could not start registrar: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Stopping registrar will write last state</span><span class="token keyword">defer</span> registrar<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Stopping publisher (might potentially drop items)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Closes first the registrar logger to make sure not more events arrive at the registrar</span><span class="token comment">// registrarChannel must be closed first to potentially unblock (pretty unlikely) the publisher</span>registrarChannel<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">close</span><span class="token punctuation">(</span>outDone<span class="token punctuation">)</span> <span class="token comment">// finally close all active connections to publisher pipeline</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Wait for all events to be processed or timeout</span><span class="token keyword">defer</span> waitEvents<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> config<span class="token punctuation">.</span>OverwritePipelines <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">,</span> <span class="token string">"Existing Ingest pipelines will be updated"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>err <span class="token operator">=</span> crawler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ConfigInput<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ConfigModules<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>crawler<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to start crawler: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// If run once, add crawler completion check as alternative to done signal</span><span class="token keyword">if</span> <span class="token operator">*</span>once <span class="token punctuation">&#123;</span>runOnce <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Running filebeat once. Waiting for completion ..."</span><span class="token punctuation">)</span>crawler<span class="token punctuation">.</span><span class="token function">WaitForCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"All data collection completed. Shutting down."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>waitFinished<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>runOnce<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Register reloadable list of inputs and modules</span>inputs <span class="token operator">:=</span> cfgfile<span class="token punctuation">.</span><span class="token function">NewRunnerList</span><span class="token punctuation">(</span>management<span class="token punctuation">.</span>DebugK<span class="token punctuation">,</span> inputLoader<span class="token punctuation">,</span> fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>reload<span class="token punctuation">.</span>Register<span class="token punctuation">.</span><span class="token function">MustRegisterList</span><span class="token punctuation">(</span><span class="token string">"filebeat.inputs"</span><span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token comment">// modules 载入</span>modules <span class="token operator">:=</span> cfgfile<span class="token punctuation">.</span><span class="token function">NewRunnerList</span><span class="token punctuation">(</span>management<span class="token punctuation">.</span>DebugK<span class="token punctuation">,</span> moduleLoader<span class="token punctuation">,</span> fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>reload<span class="token punctuation">.</span>Register<span class="token punctuation">.</span><span class="token function">MustRegisterList</span><span class="token punctuation">(</span><span class="token string">"filebeat.modules"</span><span class="token punctuation">,</span> modules<span class="token punctuation">)</span><span class="token keyword">var</span> adiscover <span class="token operator">*</span>autodiscover<span class="token punctuation">.</span>Autodiscover<span class="token keyword">if</span> fb<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Autodiscover <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>adiscover<span class="token punctuation">,</span> err <span class="token operator">=</span> autodiscover<span class="token punctuation">.</span><span class="token function">NewAutodiscover</span><span class="token punctuation">(</span><span class="token string">"filebeat"</span><span class="token punctuation">,</span>fb<span class="token punctuation">.</span>pipeline<span class="token punctuation">,</span>cfgfile<span class="token punctuation">.</span><span class="token function">MultiplexedRunnerFactory</span><span class="token punctuation">(</span>cfgfile<span class="token punctuation">.</span><span class="token function">MatchHasField</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">,</span> moduleLoader<span class="token punctuation">)</span><span class="token punctuation">,</span>cfgfile<span class="token punctuation">.</span><span class="token function">MatchDefault</span><span class="token punctuation">(</span>inputLoader<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>autodiscover<span class="token punctuation">.</span><span class="token function">QueryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>config<span class="token punctuation">.</span>Autodiscover<span class="token punctuation">,</span>b<span class="token punctuation">.</span>Keystore<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>adiscover<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Add done channel to wait for shutdown signal</span>waitFinished<span class="token punctuation">.</span><span class="token function">AddChan</span><span class="token punctuation">(</span>fb<span class="token punctuation">.</span>done<span class="token punctuation">)</span>waitFinished<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Stop reloadable lists, autodiscover -> Stop crawler -> stop inputs -> stop harvesters</span><span class="token comment">// Note: waiting for crawlers to stop here in order to install wgEvents.Wait</span><span class="token comment">//       after all events have been enqueued for publishing. Otherwise wgEvents.Wait</span><span class="token comment">//       or publisher might panic due to concurrent updates.</span>inputs<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>modules<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>adiscover<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>crawler<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>timeout <span class="token operator">:=</span> fb<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ShutdownTimeout<span class="token comment">// Checks if on shutdown it should wait for all events to be published</span>waitPublished <span class="token operator">:=</span> fb<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ShutdownTimeout <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">*</span>once<span class="token keyword">if</span> waitPublished <span class="token punctuation">&#123;</span><span class="token comment">// Wait for registrar to finish writing registry</span>waitEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">withLog</span><span class="token punctuation">(</span>wgEvents<span class="token punctuation">.</span>Wait<span class="token punctuation">,</span><span class="token string">"Continue shutdown: All enqueued events being published."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Wait for either timeout or all events having been ACKed by outputs.</span><span class="token keyword">if</span> fb<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ShutdownTimeout <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Shutdown output timer started. Waiting for max %v."</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>waitEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">withLog</span><span class="token punctuation">(</span><span class="token function">waitDuration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Continue shutdown: Time out waiting for events being published."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>waitEvents<span class="token punctuation">.</span><span class="token function">AddChan</span><span class="token punctuation">(</span>fb<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此整个<code>filebeat</code>启动流程基本清晰了。</p><h2 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h2><p>数据采集其实就是由<code>crawler</code>来完成的，他的主要组件就是<code>harvester</code>。那我们现在就来先看<code>crawler</code>的创建过程，入口函数在<code>filebeat/beater/filebeat.go</code>文件内的<code>Run</code>方法中的<code>crawler, err := newCrawler(inputLoader, moduleLoader, config.Inputs, fb.done, *once)</code>，具体在<code>filebeat/beater/crawler.go</code>中，然后就是启动err = crawler.Start(fb.pipeline, config.ConfigInput, config.ConfigModules)`，具体看这个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Start starts the crawler with all inputs</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>crawler<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>pipeline beat<span class="token punctuation">.</span>PipelineConnector<span class="token punctuation">,</span>configInputs <span class="token operator">*</span>common<span class="token punctuation">.</span>Config<span class="token punctuation">,</span>configModules <span class="token operator">*</span>common<span class="token punctuation">.</span>Config<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>log <span class="token operator">:=</span> c<span class="token punctuation">.</span>loglog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Loading Inputs: %v"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inputConfigs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Prospect the globs/paths given on the command line and launch harvesters</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> inputConfig <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>inputConfigs <span class="token punctuation">&#123;</span>    <span class="token comment">// 1、构建input对象并运行</span>err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">startInput</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> inputConfig<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"starting input failed: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> configInputs<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构建reloader，动态监听配置文件更新，非主流程，这里不累赘</span>c<span class="token punctuation">.</span>inputReloader <span class="token operator">=</span> cfgfile<span class="token punctuation">.</span><span class="token function">NewReloader</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> configInputs<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>inputReloader<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inputsFactory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"creating input reloader failed: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> configModules<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 同上</span>c<span class="token punctuation">.</span>modulesReloader <span class="token operator">=</span> cfgfile<span class="token punctuation">.</span><span class="token function">NewReloader</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> configModules<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>modulesReloader<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>modulesFactory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"creating module reloader failed: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>inputReloader <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>inputReloader<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inputsFactory<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>modulesReloader <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>modulesReloader<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>modulesFactory<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Loading and starting Inputs completed. Enabled inputs: %v"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个代码主要就是启动input对象，我们继续看<code>startInput</code>这个方法，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>crawler<span class="token punctuation">)</span> <span class="token function">startInput</span><span class="token punctuation">(</span>pipeline beat<span class="token punctuation">.</span>PipelineConnector<span class="token punctuation">,</span>config <span class="token operator">*</span>common<span class="token punctuation">.</span>Config<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> h <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>config<span class="token punctuation">.</span><span class="token function">Unpack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span>id<span class="token punctuation">,</span> err <span class="token operator">:=</span> hashstructure<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"can not compute id from configuration: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"input with same ID already exists: %v"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>runner<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>inputsFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error while initializing input: %+v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> inputRunner<span class="token punctuation">,</span> ok <span class="token operator">:=</span> runner<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>input<span class="token punctuation">.</span>Runner<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>inputRunner<span class="token punctuation">.</span>Once <span class="token operator">=</span> c<span class="token punctuation">.</span>once<span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> runnerc<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Starting input (ID: %d)"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>runner<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意方法最后的<code>runner.Start()</code>，就是在启动<code>input</code>。这里的<code>Runner</code>是对<code>input</code>的一个封装，用于管理<code>input</code>的生命周期，而<code>Start</code>方法就是通过<code>goroutine</code>调用其的<code>Run</code>方法，而<code>Run</code>的本质就是调用对于<code>input</code>的<code>Run</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Input <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Runner <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>config   inputConfiginput    Inputdone     <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>wg       <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroupOnce     <span class="token builtin">bool</span>beatDone <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Start starts the input</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Runner<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>onceWg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>Once <span class="token punctuation">&#123;</span><span class="token comment">// Make sure start is only completed when Run did a complete first scan</span><span class="token keyword">defer</span> onceWg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>onceWg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>inputList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token comment">// Add waitgroup to make sure input is finished</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>onceWg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Run starts scanning through all the file paths and fetch the related files. Start a harvester for each file</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Runner<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Initial input run</span>p<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Shuts down after the first complete run of all input</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>Once <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"input ticker stopped"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ScanFrequency<span class="token punctuation">)</span><span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"Run input"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我们最常用的就是通过<code>filebeat</code>来采集日志，我们这里就以<code>log</code>为例，来看其的具体流程，文件为<code>filebeat/input/log/input.go</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run runs the input</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Input<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"Start next scan"</span><span class="token punctuation">)</span><span class="token comment">// TailFiles is like ignore_older = 1ns and only on startup</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>TailFiles <span class="token punctuation">&#123;</span>ignoreOlder <span class="token operator">:=</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IgnoreOlder<span class="token comment">// Overwrite ignore_older for the first scan</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IgnoreOlder <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Reset ignore_older after first run</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IgnoreOlder <span class="token operator">=</span> ignoreOlder<span class="token comment">// Disable tail_files after the first run</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>TailFiles <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 扫码，核心方法</span>p<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// It is important that a first scan is run before cleanup to make sure all new states are read first</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CleanInactive <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CleanRemoved <span class="token punctuation">&#123;</span>beforeCount <span class="token operator">:=</span> p<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cleanedStates<span class="token punctuation">,</span> pendingClean <span class="token operator">:=</span> p<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">Cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"input states cleaned up. Before: %d, After: %d, Pending: %d"</span><span class="token punctuation">,</span>beforeCount<span class="token punctuation">,</span> beforeCount<span class="token operator">-</span>cleanedStates<span class="token punctuation">,</span> pendingClean<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Marking removed files to be cleaned up. Cleanup happens after next scan to make sure all states are updated first</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CleanRemoved <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> state <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">GetStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// os.Stat will return an error in case the file does not exist</span>stat<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span><span class="token function">removeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"Remove state for file as file removed: %s"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"input state for %s was not removed: %s"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Check if existing source on disk and state are the same. Remove if not the case.</span>newState <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">NewState</span><span class="token punctuation">(</span>stat<span class="token punctuation">,</span> state<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> p<span class="token punctuation">.</span>meta<span class="token punctuation">,</span> p<span class="token punctuation">.</span>fileStateIdentifier<span class="token punctuation">)</span><span class="token keyword">if</span> state<span class="token punctuation">.</span>IdentifierName <span class="token operator">!=</span> newState<span class="token punctuation">.</span>IdentifierName <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"file_identity configuration for file has changed from %s to %s, generating new id"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>IdentifierName<span class="token punctuation">,</span> newState<span class="token punctuation">.</span>IdentifierName<span class="token punctuation">)</span>state<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> state<span class="token punctuation">.</span>IdentifierName <span class="token operator">=</span> p<span class="token punctuation">.</span>fileStateIdentifier<span class="token punctuation">.</span><span class="token function">GenerateID</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">IsEqual</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span><span class="token function">removeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"Remove state of file as its identity has changed: %s"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>p.scan()</code>是其中的核心方法，跟踪进去看具体的实现：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Scan starts a scanGlob for each provided path/glob</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Input<span class="token punctuation">)</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sortInfos <span class="token punctuation">[</span><span class="token punctuation">]</span>FileSortInfo<span class="token keyword">var</span> files <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>paths <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ScanSort <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>sortInfos<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">getSortedFiles</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ScanOrder<span class="token punctuation">,</span> p<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ScanSort<span class="token punctuation">,</span> <span class="token function">getSortInfos</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Failed to sort files during scan due to error %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> sortInfos <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>files <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> path <span class="token builtin">string</span><span class="token keyword">var</span> info os<span class="token punctuation">.</span>FileInfo<span class="token keyword">if</span> sortInfos <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>path <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span>info <span class="token operator">=</span> paths<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>path <span class="token operator">=</span> sortInfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pathinfo <span class="token operator">=</span> sortInfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">&#125;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>done<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Scan aborted because input stopped."</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">&#125;</span>newState<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getFileState</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> info<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Skipping file %s due to error %s"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Load last state</span>isNewState <span class="token operator">:=</span> p<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">IsNew</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token comment">// Ignores all files which fall under ignore_older</span><span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token function">isIgnoreOlder</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">handleIgnoreOlder</span><span class="token punctuation">(</span>isNewState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Updating ignore_older state error: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token comment">// Decides if previous state exists</span><span class="token keyword">if</span> isNewState <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"Start harvester for new file: %s"</span><span class="token punctuation">,</span> newState<span class="token punctuation">.</span>Source<span class="token punctuation">)</span>      <span class="token comment">// 发现是新文件，需构建新的harvester对象并运行</span>err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">startHarvester</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> errHarvesterLimit <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> harvesterErrMsg<span class="token punctuation">,</span> newState<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span>harvesterErrMsg<span class="token punctuation">,</span> newState<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>lastState <span class="token operator">:=</span> p<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">FindPrevious</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">harvestExistingFile</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> lastState<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scan</code>方法内首先获取所有的文件。其次获取文件状态，根据状态来判定收集最新数据，还是从历史文件收集。文件收集会构建<code>Harvester</code>对象。<code>p.startHarvester(newState, 0)</code>是其核心方法：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; startHarvester starts a new harvester with the given offset&#x2F;&#x2F; In case the HarvesterLimit is reached, an error is returnedfunc (p *Input) startHarvester(state file.State, offset int64) error &#123;if p.numHarvesters.Inc() &gt; p.config.HarvesterLimit &amp;&amp; p.config.HarvesterLimit &gt; 0 &#123;p.numHarvesters.Dec()harvesterSkipped.Add(1)return errHarvesterLimit&#125;&#x2F;&#x2F; Set state to &quot;not&quot; finished to indicate that a harvester is runningstate.Finished &#x3D; falsestate.Offset &#x3D; offset&#x2F;&#x2F; Create harvester with state&#x2F;&#x2F; 创建harvester h, err :&#x3D; p.createHarvester(state, func() &#123; p.numHarvesters.Dec() &#125;)if err !&#x3D; nil &#123;p.numHarvesters.Dec()return err&#125; &#x2F;&#x2F; 对harvester 进行配置err &#x3D; h.Setup()if err !&#x3D; nil &#123;p.numHarvesters.Dec()return fmt.Errorf(&quot;error setting up harvester: %s&quot;, err)&#125;&#x2F;&#x2F; Update state before staring harvester&#x2F;&#x2F; This makes sure the states is set to Finished: false&#x2F;&#x2F; This is synchronous state update as part of the scanh.SendStateUpdate()&#x2F;&#x2F; 启动harvesterif err &#x3D; p.harvesters.Start(h); err !&#x3D; nil &#123;p.numHarvesters.Dec()&#125;return err&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个方法的核心内容可以概括成三步：</p><ol><li><code>p.createHarvester</code>构建<code>harvester</code></li><li><code>p.Setup</code>配置<code>harvester</code>。<code>Setup</code>方法内会初始化文件相关的内容，以及构建文件<code>reader</code>。</li><li><code>p.harvesters.Start(h)</code>运行<code>harvester</code></li></ol><p>这里我们具体看下<code>p.harvesters.Start(h)</code>这个方法，其的作用就是继续在一个<code>go routine</code>中启动<code>harvester.run</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Start starts the given harvester and add its to the registry</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Registry<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>h Harvester<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">// Make sure stop is not called during starting a harvester</span>r<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Make sure no new harvesters are started after stop was called</span><span class="token keyword">if</span> <span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"registry already stopped"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>r<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// Add the harvester to the registry and share the lock with stop making sure Start() and Stop()</span><span class="token comment">// have a consistent view of the harvesters.</span>r<span class="token punctuation">.</span>harvesters<span class="token punctuation">[</span>h<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>r<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Starts harvester and picks the right type. In case type is not set, set it to default (log)</span>err <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Error running input: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>h.Run</code>其实又是一个interface方法，这里我们继续以<code>log</code>为例，因此我们这里跟踪<code>filebeat/input/log/harvester.go</code>中的<code>Run</code>方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run start the harvester and reads files line by line and sends events to the defined output</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Harvester<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">// Allow for some cleanup on termination</span><span class="token keyword">if</span> h<span class="token punctuation">.</span>onTerminate <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> h<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>outlet <span class="token operator">:=</span> channel<span class="token punctuation">.</span><span class="token function">CloseOnSignal</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">outletFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>done<span class="token punctuation">)</span>forwarder <span class="token operator">:=</span> harvester<span class="token punctuation">.</span><span class="token function">NewForwarder</span><span class="token punctuation">(</span>outlet<span class="token punctuation">)</span><span class="token comment">// This is to make sure a harvester is not started anymore if stop was already</span><span class="token comment">// called before the harvester was started. The waitgroup is not incremented afterwards</span><span class="token comment">// as otherwise it could happened that between checking for the close channel and incrementing</span><span class="token comment">// the waitgroup, the harvester could be stopped.</span><span class="token comment">// Here stopLock is used to prevent a data race where stopWg.Add(1) below is called</span><span class="token comment">// while stopWg.Wait() is executing in a different goroutine, which is forbidden</span><span class="token comment">// according to sync.WaitGroup docs.</span>h<span class="token punctuation">.</span>stopLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>stopWg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>stopLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>h<span class="token punctuation">.</span>done<span class="token punctuation">:</span>h<span class="token punctuation">.</span>stopWg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Channel to stop internal harvester routines</span>h<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Makes sure file is properly closed when the harvester is stopped</span>h<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>harvesterRunning<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// Marks harvester stopping completed</span>h<span class="token punctuation">.</span>stopWg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>harvesterStarted<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>harvesterRunning<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// Closes reader after timeout or when done channel is closed</span><span class="token comment">// This routine is also responsible to properly stop the reader</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>source <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>closeTimeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token comment">// starts close_timeout timer</span><span class="token keyword">if</span> h<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CloseTimeout <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>closeTimeout <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CloseTimeout<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token comment">// Applies when timeout is reached</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>closeTimeout<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Closing harvester because close_timeout was reached: %s"</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token comment">// Required when reader loop returns and reader finished</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>h<span class="token punctuation">.</span>done<span class="token punctuation">:</span><span class="token punctuation">&#125;</span>h<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> h<span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Failed to stop harvester for file %s: %v"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Harvester started for file: %s"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span>h<span class="token punctuation">.</span>doneWg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span><span class="token function">monitorFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>doneWg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>h<span class="token punctuation">.</span>done<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">&#125;</span>message<span class="token punctuation">,</span> err <span class="token operator">:=</span> h<span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> err <span class="token punctuation">&#123;</span><span class="token keyword">case</span> ErrFileTruncate<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"File was truncated. Begin reading file from offset 0: %s"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span>h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Offset <span class="token operator">=</span> <span class="token number">0</span>filesTruncated<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">case</span> ErrRemoved<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"File was removed: %s. Closing because close_removed is enabled."</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token keyword">case</span> ErrRenamed<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"File was renamed: %s. Closing because close_renamed is enabled."</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token keyword">case</span> ErrClosed<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Reader was closed: %s. Closing."</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token keyword">case</span> io<span class="token punctuation">.</span>EOF<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"End of file reached: %s. Closing because close_eof is enabled."</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token keyword">case</span> ErrInactive<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"File is inactive: %s. Closing because close_inactive of %v reached."</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> h<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CloseInactive<span class="token punctuation">)</span><span class="token keyword">case</span> reader<span class="token punctuation">.</span>ErrLineUnparsable<span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Skipping unparsable line in file: %v"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token comment">//line unparsable, go to next line</span><span class="token keyword">continue</span><span class="token keyword">default</span><span class="token punctuation">:</span>logp<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Read line error: %v; File: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> h<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">// Get copy of state to work on</span><span class="token comment">// This is important in case sending is not successful so on shutdown</span><span class="token comment">// the old offset is reported</span>state <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>startingOffset <span class="token operator">:=</span> state<span class="token punctuation">.</span>Offsetstate<span class="token punctuation">.</span>Offset <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span><span class="token comment">// Stop harvester in case of an error</span><span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span>forwarder<span class="token punctuation">,</span> state<span class="token punctuation">,</span> message<span class="token punctuation">,</span> startingOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">// Update state of harvester as successfully sent</span>h<span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token comment">// Update metics of harvester as event was sent</span>h<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>readOffset<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>h<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>lastPublished<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>lastPublishedEventTimestamp<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Ts<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个方法主要分为这么几步：</p><ol><li>创建一个<code>forwarder</code>转发器</li><li>死循环从<code>reader</code>里的读取内容</li><li>通过<code>farwarder</code>向下转发</li></ol><p><code>h.sendEvent(data, forwarder)</code>这段代码将采集的数据发送到下游，内部其实就是用<code>forwarder</code>转发了数据。</p><p>到此整个采集的流程就基本完成了。</p><h3 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h3><p>通过以上这些流程的分析，可以看出filebeat中其实大量使用到了<code>go routine</code>协程。而这也是<code>go</code>的最大一个特性。<code>filebeat</code>其实相当于一个大的管理器，他管理者以单个<code>input</code>文件为单位的n组协程，这样的好处就是他们之间是相互没有影响的，并且由于协程比线程要来的轻量很多，并且对于cpu的上下文切换也要少很多，对于系统资源的消耗也会小很多。那为什么有时候我们又会看到<code>filebeat</code>占用了近20%的cpu利用率，这个其实就在于<code>forwarder</code>转发后的处理流程了，如果你引入了过多的计算<code>process</code>，或者你的<code>output</code>里有重cpu的计算例如压缩，那当然会消耗更多的cpu资源，因此在使用时还是要评估好你的方案对系统资源的消耗。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;说完了&lt;code&gt;filebeat&lt;/code&gt;的基础架构和相关设计后，我们就来看下&lt;code&gt;filebeat&lt;/code&gt;是如何来实现这些功能的。这里只对几个相对来说比较重要的几个流程进行讨论。其余的设计会在之后的文章中进行阐述。几个流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动过程&lt;/li&gt;
&lt;li&gt;harvester 监听过程（以log为例）&lt;/li&gt;
&lt;li&gt;outputs 处理流程（以kafka为例）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Filebeat" scheme="http://blog.jobshen.com/categories/Filebeat/"/>
    
    
    <category term="filebeat" scheme="http://blog.jobshen.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat 浅析（一）</title>
    <link href="http://blog.jobshen.com/posts/6bf64646.html"/>
    <id>http://blog.jobshen.com/posts/6bf64646.html</id>
    <published>2021-02-17T04:22:36.000Z</published>
    <updated>2021-02-17T04:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a> or <a href="https://www.elastic.co/products/logstash">Logstash</a> for indexing.</p></blockquote><p>这是<code>elastic</code>对于<code>filebeat</code>的官方描述，翻译过来就是<code>filebeat</code>是一个轻量级的用来采集和转发日志数据的组件。将采集的日志封装成<code>event</code>转发给下游的组件，例如<code>elasticsearch</code>、<code>logstash</code>或者<code>kafka</code>。</p><a id="more"></a><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p><img data-src="https://www.elastic.co/guide/en/beats/filebeat/current/images/filebeat.png" alt="artich"></p><h2 id="Inputs"><a href="#Inputs" class="headerlink" title="Inputs"></a>Inputs</h2><p>该组件的作用就如同名称一样，是用来定义输入源的，简单理解就是定义了你需要采集的数据源是哪些，对于我们最常使用的日志来说就是告诉<code>filebeat</code>需要监听哪些日志文件，当然其<code>inputs</code>类型并不是只有<code>log</code>一种，其支持以下类型：</p><ul><li>Azure Event Hub</li><li>Cloud Foundry</li><li>Container</li><li>Docker</li><li>Google Pub/Sub</li><li>HTTP Endpoint</li><li>HTTP JSON</li><li>Kafka</li><li><strong>Log</strong></li><li>MQTT</li><li>NetFlow</li><li>Office 365 Management Activity API</li><li>Redis</li><li>S3</li><li>Stdin</li><li>Syslog</li><li>TCP</li><li>UDP</li></ul><p>当然最常有的是其中的<code>log</code>类型，使用其来采集我们的应用日志，然后可以对我们的日志信息进行实时/离线统计、分析。</p><h2 id="Harvester"><a href="#Harvester" class="headerlink" title="Harvester"></a>Harvester</h2><p>该组件严格意义上来说也是属于<code>inputs</code>的，但是由于其重要性，这里才单独拿出来说，该组件的功能其实很简单–监听需要采集的输入源，将其监听到的所有变更向下进行转发。转发到哪呢，这就会引出下一个组件，<code>Spooler</code>。</p><h2 id="Spooler"><a href="#Spooler" class="headerlink" title="Spooler"></a>Spooler</h2><p><code>spooler</code>其实是一个集合，里面包括很多小组件：<code>porcessor</code>、<code>Internal queue</code>等。</p><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p>该组件是对<code>harvester</code>发过来的<code>event</code>进行二次处理转化为另一个类型的<code>event</code>。可以把其简单理解为一个<code>filtering</code>的过程，从中将一些不满足你的需求的<code>event</code>过滤调，只将符合条件的<code>event</code>向下传递，进入<code>internal queue</code>。</p><h3 id="Internal-Queue"><a href="#Internal-Queue" class="headerlink" title="Internal Queue"></a>Internal Queue</h3><p>该组件就是<code>filebeat</code>用来存储<code>harvester</code>转发的<code>data event</code>的内部“队列”，其默认实现是一个内存队列，如果对数据完整性要求高可以选择使用磁盘来存储相关队列信息。同时<code>internal queue</code>还会对<code>event</code>进行一次合并（<code>batch</code>）操作，目的是为了减少<code>outputs</code>组件的发送压力。</p><h2 id="Outputs"><a href="#Outputs" class="headerlink" title="Outputs"></a>Outputs</h2><p>该组件就是用来消费<code>internal queue</code>队列中的<code>event</code>的，每次其会从<code>internal queue</code>中取出一个<code>batch</code>的数据，经过编解码、压缩等一系列操作后将其存储到下游系统中。目前<code>filebeat</code>支持的<code>outputs</code>包含：</p><ul><li>Elasticsearch Service</li><li>Elasticsearch</li><li>Logstash</li><li>Kafka</li><li>Redis</li><li>File</li><li>Console</li></ul><h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><p>除了上述的几个主要组件之外，<code>filebeat</code>还包括很多其他组件，比如：<code>modules</code>、<code>monitor</code>等。这里暂不进行介绍。可以自己去看<code>Filebeat</code>的<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">官方文档</a>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>filebeat</code>的大致流程就是使用<code>inputs</code>组件中定义的<code>type</code>类型的<code>harvester</code>来监听采集相应<code>inputs</code>中产生的事件（<code>event</code>），并将其转发到<code>spooler</code>中，<code>spooler</code>在经过一系列的<code>processor</code>处理后将<code>events</code>合并为一个<code>batch</code>最终存入到<code>queue</code>中，等待<code>outputs</code>来消费，<code>outputs</code>将从<code>queue</code>中拉取到的<code>batch</code>存入对于的下游系统中。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to &lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt; or &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;Logstash&lt;/a&gt; for indexing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是&lt;code&gt;elastic&lt;/code&gt;对于&lt;code&gt;filebeat&lt;/code&gt;的官方描述，翻译过来就是&lt;code&gt;filebeat&lt;/code&gt;是一个轻量级的用来采集和转发日志数据的组件。将采集的日志封装成&lt;code&gt;event&lt;/code&gt;转发给下游的组件，例如&lt;code&gt;elasticsearch&lt;/code&gt;、&lt;code&gt;logstash&lt;/code&gt;或者&lt;code&gt;kafka&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Filebeat" scheme="http://blog.jobshen.com/categories/Filebeat/"/>
    
    
    <category term="filebeat" scheme="http://blog.jobshen.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>2020年回顾</title>
    <link href="http://blog.jobshen.com/posts/8999c837.html"/>
    <id>http://blog.jobshen.com/posts/8999c837.html</id>
    <published>2020-12-23T13:30:03.000Z</published>
    <updated>2020-12-23T13:30:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2020年对于我来说，真的可以说是多灾多难的一年，各种“可怕”的事情接踵而至，差点就把我给打趴下，还好现在2020终于快过完了，而我的生活也终于渐渐步入正轨了，在这里知识想对这一年中发生的一些事情做一下记录，以便可以在以后的日子里引以为戒，同时也对2021年立几个<strong>flag</strong>。</p><a id="more"></a><h2 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h2><p>&emsp;&emsp;年初的疫情把大伙都搞得心力交瘁，人心惶惶。我也一样，从腊月二十几开始就一直是大门不迈二门不出，死宅家里。后面稍稍好转一点了，想出个门就会迎来老婆的如同死神般的死瞪，一直到了5月份才敢正常点的出门。说起来在家里一宅就是小半年啊😂 当然为啥真的会宅这么久也不光是疫情害的。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>&emsp;&emsp;虽然有想到由于疫情工作会便地艰难点，可是万万没想到会来的这么快。刚恢复远程工作没几天，就接到了HR打来的劝退视屏会议–企业想裁员但又不想给赔偿，就想着给员工洗脑让其主动离职。由于去年下半年开始就和直属领导有点小摩擦被不断地穿小鞋，所以自然而然地我是那个首当其冲地需要被“裁”的人。可是再怎么说也不能平白无故地被欺负是吧，经过了一个多星期的沟通终于还是拿到了应得的补偿，中间的过程可谓“叹为观止”、“奇事频出”。当然演技最好的还属HR。可谓是软硬兼施，十八般武艺齐上阵。先是在那自责工作失误啊，没有完成指标啊，可怜可怜我啊；再者就是恐吓，什么你不离职到时候背调你就等着吧，离职证明的材料你也等着吧，看你怎么找工作。再细的就不想多说了。</p><h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><p>&emsp;&emsp;由于疫情影响，这段时候找工作是真的有点困难，前前后后大概面试了十七八家企业，其中4家左右是没有面上、3家职位不合适没有接offer、3家是以奇葩理由给拒的（比如你住的太远等等），剩下的是由于背调，这时候才知道啊，毕竟杭州的科技公司HR的圈子很小的。好在最后还是找到了一家满意的公司，可以继续开开心心码代码了。</p><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>马上就要进入2021年了，期望新的一年没有如此之多地磕磕绊绊，在此也是立下几个flag，也算是给自己定个小目标吧。</p><ul><li>搞一个opensource project （已经和小伙伴再规划了 期望新的一年真的能有始有终地去搞下去）</li><li>把工作中的经验分享出来，也算是对其的一个总结吧（目前手头的几个项目都蛮有意思的）</li><li>rust（一直想学习下呢）</li><li>完成一件人生大事</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;2020年对于我来说，真的可以说是多灾多难的一年，各种“可怕”的事情接踵而至，差点就把我给打趴下，还好现在2020终于快过完了，而我的生活也终于渐渐步入正轨了，在这里知识想对这一年中发生的一些事情做一下记录，以便可以在以后的日子里引以为戒，同时也对2021年立几个&lt;strong&gt;flag&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="http://blog.jobshen.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="感悟" scheme="http://blog.jobshen.com/tags/%E6%84%9F%E6%82%9F/"/>
    
    <category term="随笔" scheme="http://blog.jobshen.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="http://blog.jobshen.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>关于Java日志隔离功能的闲谈</title>
    <link href="http://blog.jobshen.com/posts/be21c8ca.html"/>
    <id>http://blog.jobshen.com/posts/be21c8ca.html</id>
    <published>2019-01-21T14:20:16.000Z</published>
    <updated>2019-01-21T14:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;我们都知道日志至于任何系统、软件都是十分重要的组成部分，通过日志我们可以方便地了解到现在系统运行是否正常、是否有异常情况。但有时候日志太多了也会有幸福地烦恼，发生异常想通过日志进行排查，可是满屏地日志都是不那么重要地内容，像心跳日志、debug日志等等。</p><p>&emsp;&emsp;这在java应用尤为严重，你每引入地一个jar都有可能引入一堆打印的日志，这样一来要从日志中找到你所需要的内容将是一件极其困难的事情。当然，你会说，java拥有这么多优秀的日志框架系统，可以简单地通过相应地配置文件将这些内容根据不同的输出级别输出到不同的目录文件，可是如果将这件事情都交给终端用户去处理，那将会是一件极其复杂的工程，他得明白哪些是他需要的、哪些是他不需要的，而这些信息应该是对应的开发人员最清楚不过的，因此让开发人员提前将这些日志进行归类，输出到指定的文件，那对应使用者来说将会变得很简单。</p><a id="more"></a><h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2><p>&emsp;&emsp;首先想到的应该就是通过日志的配置文件，添加不同的<code>appender</code>和<code>logger</code>。可是这些配置文件应该是存在与用户的应用中的，作为一个被引入的module该如何去修改这份文件呢？而且用户最终采用的是哪个日志框架我同样不能左右，我该根据哪个实现呢？</p><p>&emsp;&emsp;第一个问题，很好解决，现在大部分的日志框架都提供了基于java 代码的方式来添加<code>appender</code>和<code>logger</code>的配置，因此我们只需要在应用启动时，获取<code>LoggerContext</code>对象，然后添加自定义的<code>appender</code>和<code>logger</code>即可，例如阿里的TDDL中就有相关的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// slf4j只是一个代理工程，需要判断一下具体的实现类</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkLogger</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> LOGBACK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canUseEncoder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dynamic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicLogbackLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        dynamic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicLogback918Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkLogger</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> <span class="token class-name">LOG4J_Adapter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dynamic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicLog4jAdapterLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkLogger</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> LOG4J<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dynamic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicLog4jLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"logger is not a log4j/logback instance, dynamic logger is disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先判断具体地实现框架是哪个，然后再获得对应实现框架的<code>loggerContext</code>，例如<code>logback</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>loggerContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ILoggerFactory</span> lcObject <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>lcObject <span class="token keyword">instanceof</span> <span class="token class-name">LoggerContext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LogbackException</span><span class="token punctuation">(</span><span class="token string">"Expected LOGBACK binding with SLF4J, but another log system has taken the place: "</span> <span class="token operator">+</span> lcObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    loggerContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span> lcObject<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loggerContext<span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再添加自身所需的<code>appender</code>和<code>logger</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Appender</span> <span class="token function">buildAppender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">RollingFileAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RollingFileAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>loggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setAppend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getLogPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimeBasedRollingPolicy</span> rolling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimeBasedRollingPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rolling<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>loggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>rolling<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token punctuation">;</span>rolling<span class="token punctuation">.</span><span class="token function">setFileNamePattern</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getLogPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".%d&#123;yyyy-MM-dd&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rolling<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setRollingPolicy</span><span class="token punctuation">(</span>rolling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PatternLayoutEncoder</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PatternLayoutEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>layout<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>loggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>layout<span class="token punctuation">.</span><span class="token function">setPattern</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>layout<span class="token punctuation">.</span><span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>layout<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appender<span class="token punctuation">.</span><span class="token function">setEncoder</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动</span>appender<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> appender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是这样做，存在的问题也是很明显的：</p><ul><li>需自己判断应用采用的实现框架，但可以通过抽取的方式构建一个公共jar，例如common包</li><li>该实现框架需要能够支持通过动态的形式添加<code>appender</code></li><li>仍然与应用的<code>Log</code>耦合在一起</li></ul><p>那除此之外，还有其他的方式能够实现同样的功能吗？答案当时是**<em>有**</em>。</p><h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><p>&emsp;&emsp;默认情况下一个应用启动后，只会存在一个<code>loggerContext</code>，因为日志框架都是单例模式的，也是为了减少开销。那如果我们有多个<code>loggerContext</code>呢，是不是可以每个需要的<code>modeule</code>都拥有一份单独的<code>loggerContext</code>，那不就可以通过加载配置文件的形式更轻量级地来实现需要动态添加<code>appender</code>的功能呢。</p><p>大致的实现逻辑应该是这样：</p><ul><li>需要一个<code>map</code>来管理所有的这些<code>loggerContext</code>，以每个<code>module</code>的<code>groupId</code>+<code>artifactId</code>（现在90%以上的工程都提供maven坐标）为唯一标识 – <code>key</code></li><li>每个module自身需要有一份配置文件，当然由于日志实现很多你可能需要多份文件，同样你可以定义自己的格式，然后通过java code的形式去转化为最终的各个不同实现</li><li>需要能通过唯一的Id，例如<code>groupId</code>+<code>artifactId</code>定位到你的配置文件</li></ul><p>这样大致的一个可以做到日志隔离的简单框架就搭建起来了，使用配置文件还有一个好处就是，一些日志框架可以动态刷新配置文件，这就使得你可以在运行时动态改变日志参数，例如日志级别。</p><p>获取一个单独的logger对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ModuleLoggerManager</span><span class="token punctuation">.</span><span class="token function">getLoggerByCoordinate</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"coordinate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>维护<code>logger</code>相关对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ModuleLogId</span><span class="token punctuation">,</span> <span class="token class-name">ModuleLogInfo</span><span class="token punctuation">></span></span> MODULE_LOGGER_MAP <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModuleLogId</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一些可修改的日志配置信息，可通过$&#123;key&#125;的形式传递</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span>              coordinate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ModuleLogId</span> <span class="token function">addTag</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModuleLogInfo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token comment">// 根据具体实现会创建不同的loggerFactory对象，然后不同的logFactory对象会创建不同的loggerContext对象</span>    <span class="token keyword">private</span> <span class="token class-name">AbstractLoggerModuleFactory</span> abstractLoggerModuleFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建factory过程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AbstractLoggerModuleFactory</span> <span class="token function">createILoggerFactory</span><span class="token punctuation">(</span><span class="token class-name">ModuleLogId</span> moduleLogId<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> moduleClassLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token class-name">Module_LOGGER_DISABLE_PROP_KEY</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token class-name">Module_LOGGER_DISABLE_PROP_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Module Logger is disabled!  -D&#123;&#125;=true"</span><span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token class-name">Module_LOGGER_DISABLE_PROP_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> JVM_LOGGER_FACTORY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// set log props</span><span class="token class-name">LogTypeJudgeUtil</span><span class="token punctuation">.</span><span class="token function">processGlobalSystemLogProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do create</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// first log4j2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LogTypeJudgeUtil</span><span class="token punctuation">.</span><span class="token function">isLog4j2Usable</span><span class="token punctuation">(</span>moduleClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> log4j2LoggerFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//second logback</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LogTypeJudgeUtil</span><span class="token punctuation">.</span><span class="token function">isLogbackUsable</span><span class="token punctuation">(</span>moduleClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> logbackLoggerFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// third log4j</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LogTypeJudgeUtil</span><span class="token punctuation">.</span><span class="token function">isLog4jUsable</span><span class="token punctuation">(</span>moduleClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> log4jLoggerFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No log util is usable, Default app logger will be used."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Build ILoggerFactory error! Default app logger will be used."</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> JVM_LOGGER_FACTORY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以log4j2为例，获取loggerFactory：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * confFileUrl 为根据传入的coordinate以及具体的日志实现框架，拼接出路径 * 例如 coordinate 为 org.jobshen.mq.rocketmq * 则 log4j2的文件路径为：classpath*:org/jobshen/mq/rocketmq/log/log4j2/log-conf.xml */</span><span class="token keyword">protected</span> <span class="token class-name">AbstractLoggerModuleFactory</span> <span class="token function">doBuild</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> coordinate<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> moduleClassLoader<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">URL</span> confFileUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//构建单独的loggerContext对象</span><span class="token keyword">final</span> <span class="token class-name">LoggerContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerContext</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> confFileUrl<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ConfigurationFactory</span> configurationFactory <span class="token operator">=</span> <span class="token class-name">ConfigurationFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> URI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Method</span> getConfigurationMethod <span class="token operator">=</span> configurationFactory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getConfiguration"</span><span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">)</span> getConfigurationMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>configurationFactory<span class="token punctuation">,</span>coordinate<span class="token punctuation">,</span> confFileUrl<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> moduleClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> noSuchMethodException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">LoggerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> URI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>parameterTypes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Method</span> getConfigurationMethod <span class="token operator">=</span> configurationFactory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getConfiguration"</span><span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">)</span> getConfigurationMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>configurationFactory<span class="token punctuation">,</span>context<span class="token punctuation">,</span> coordinate<span class="token punctuation">,</span> confFileUrl<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> moduleClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No log4j2 configuration are found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//from Map&lt;String,String></span>config<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//from Map&lt;String,String></span>config<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractLoggerModuleFactory</span><span class="token punctuation">(</span><span class="token function">getLoggingType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span><span class="token class-name">Log4jLogger</span><span class="token punctuation">></span></span> loggerMap <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Logger</span> <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">String</span> loggerName<span class="token punctuation">,</span> <span class="token class-name">ModuleLogLevel</span> logLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span><span class="token class-name">Log4jLogger</span> log4jLoggerAdapter <span class="token operator">=</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span><span class="token class-name">Log4jLogger</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>loggerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>ROOT_LOGGER_NAME<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>loggerName<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span>ROOT_LOGGER_NAME<span class="token operator">:</span> loggerName<span class="token punctuation">;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token class-name">Logger</span> log4j2Logger <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//level</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span><span class="token class-name">Level</span> log4j2Level <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toLog4j2Level</span><span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>log4j2Logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span>log4j2Level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> log4jLoggerAdapter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span>            <span class="token comment">//使用门面框架 slf4j 返回logger对象</span><span class="token keyword">public</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span><span class="token class-name">Logger</span> <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>ROOT_LOGGER_NAME<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span>ROOT_LOGGER_NAME<span class="token operator">:</span> name<span class="token punctuation">;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token class-name">Logger</span> log4jLogger <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log4jLogger</span> oldInst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loggerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldInst <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> oldInst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Log4jLogger</span> newInst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log4jLogger</span><span class="token punctuation">(</span>log4jLogger<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>oldInst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loggerMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newInst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> oldInst <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> newInst <span class="token operator">:</span> oldInst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span><span class="token class-name">Level</span> <span class="token function">toLog4j2Level</span><span class="token punctuation">(</span><span class="token class-name">ModuleLogLevel</span> logLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"ModuleLogLevel is NULL when adapter to log4j2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>logLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> TRACE<span class="token operator">:</span><span class="token keyword">return</span> <span class="token class-name">Level</span><span class="token punctuation">.</span>TRACE<span class="token punctuation">;</span><span class="token keyword">case</span> DEBUG<span class="token operator">:</span><span class="token keyword">return</span> <span class="token class-name">Level</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">;</span><span class="token keyword">case</span> INFO<span class="token operator">:</span><span class="token keyword">return</span> <span class="token class-name">Level</span><span class="token punctuation">.</span>INFO<span class="token punctuation">;</span><span class="token keyword">case</span> WARN<span class="token operator">:</span><span class="token keyword">return</span> <span class="token class-name">Level</span><span class="token punctuation">.</span>WARN<span class="token punctuation">;</span><span class="token keyword">case</span> ERROR<span class="token operator">:</span><span class="token keyword">return</span> <span class="token class-name">Level</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>logLevel<span class="token operator">+</span> <span class="token string">" is unknown when adapter to log4j2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Log4j2 loggerModuleFactory build error!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然这个方案也有其缺陷，loggerContext对象增加了对应的内存消耗也就增加了。简单统计了下，每增加一个采用日志隔离框架的模块，内存使用增加<code>5~10kb</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们都知道日志至于任何系统、软件都是十分重要的组成部分，通过日志我们可以方便地了解到现在系统运行是否正常、是否有异常情况。但有时候日志太多了也会有幸福地烦恼，发生异常想通过日志进行排查，可是满屏地日志都是不那么重要地内容，像心跳日志、debug日志等等。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这在java应用尤为严重，你每引入地一个jar都有可能引入一堆打印的日志，这样一来要从日志中找到你所需要的内容将是一件极其困难的事情。当然，你会说，java拥有这么多优秀的日志框架系统，可以简单地通过相应地配置文件将这些内容根据不同的输出级别输出到不同的目录文件，可是如果将这件事情都交给终端用户去处理，那将会是一件极其复杂的工程，他得明白哪些是他需要的、哪些是他不需要的，而这些信息应该是对应的开发人员最清楚不过的，因此让开发人员提前将这些日志进行归类，输出到指定的文件，那对应使用者来说将会变得很简单。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://blog.jobshen.com/categories/Java/"/>
    
    
    <category term="log" scheme="http://blog.jobshen.com/tags/log/"/>
    
    <category term="隔离" scheme="http://blog.jobshen.com/tags/%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于k8s下使用Ingress保持长连接的异常情况排查</title>
    <link href="http://blog.jobshen.com/posts/eee2bd13.html"/>
    <id>http://blog.jobshen.com/posts/eee2bd13.html</id>
    <published>2019-01-02T14:19:02.000Z</published>
    <updated>2019-01-02T14:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><pre class="line-numbers language-none"><code class="language-none">在我们中应用有一个使用到&#96;Http Long Poll&#96;的场景，它需要一个http请求保持最长30秒，用于即使获取到最新的数据。在k8s环境下，发现应该存在偶发的异常，表现为长连接没有正常关闭，抛出异常：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token class-name">SocketException</span><span class="token operator">:</span> <span class="token class-name">Unexpected</span> end of file from server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><h3 id="应用异常排查"><a href="#应用异常排查" class="headerlink" title="应用异常排查"></a>应用异常排查</h3><p>&emsp;&emsp;首先我们先对应用程序的代码进行了排查，并没有发现代码上的bug，可以排除是由于代码bug导致的这个问题。</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>&emsp;&emsp;接下来考虑的方式就是抓包，分别在三个节点上进行抓包：应用程序所在pod、ingress-nginx所在pod、服务端pod。</p><p>分别执行以下shell脚本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpdump tcp -s 0  -w .&#x2F;target.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>抓取当前网卡下的所有tcp流量，然后使用wireshark进行分析。发现了一个比较奇怪的现象：</p><p><img data-src="https://picture.jobshen.com/blog/tcpdump/client-tcpdump.png" alt="client-tcpdump.png"></p><p><img data-src="https://picture.jobshen.com/blog/tcpdump/nginx-tcpdump.png" alt="nginx-tcpdump.png"></p><p><img data-src="https://picture.jobshen.com/blog/tcpdump/server-tcpdump.png" alt="server-tcpdump.png"></p><p>从上到下三张图片分别是应用程序端、nginx端、服务端的抓包数据，可以发现连接的关闭是由nginx这个节点发起的，应用端和服务端同时收到了来自nginx的<code>FIN ACK</code>包，要求关闭当前连接，并且都开始执行四次握手过程。但是在这个过程中又发生了什么异常导致这个过程并没有正常完成。</p><p>通过观察大量的抓包数据后发现这个情况发生的非常多，但并不是每次都会导致连接的异常关闭，大部分还是能够正常关闭连接并建立新的连接的。</p><p>通过仔细观察发现被异常关闭的连接，都是发生在<code>Seq=1</code>的情况下，这个原因还不是很清楚。</p><p>那为什么<strong>nginx</strong>会主动发起关闭连接呢？</p><h3 id="Nginx-排查"><a href="#Nginx-排查" class="headerlink" title="Nginx 排查"></a>Nginx 排查</h3><p>&emsp;&emsp;这时候首先想到的就是nginx的日志，在翻查了nginx的<code>access.log</code>后，发现在相同的时间端，nginx都发生了<code>reload</code>现象：</p><pre class="line-numbers language-none"><code class="language-none">backend reload requiredingress backend successfully reloaded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>难道是由于nginx的reload导致的问题吗？</p><p>通过查询发现，nginx reload的大致流程为：</p><ul><li>reload命令触发nginx生成新的worker进程用于接受新的连接请求</li><li><code>old worker</code> 进程不再接受请求</li><li>对于仍然存在于<code>old worker</code>进程上的<code>keep alive</code>的连接，主动发送<code>FIN ACK</code> 包，通知对方关闭当前连接</li><li>当所有old worker 上的连接都关闭或者超过<code>worker-shutdown-timeout</code>所设定的时间后，会关闭old worker 进程</li></ul><p>&emsp;&emsp;通过查询k8s上ingress的默认配置发现，<code> worker-shutdown-timeout</code>被设置为了10s，这时候基本可以确定问题了，由于<code>old worker</code>关闭的窗口时间只有10s，如果在这个时间段内有连接还没有完成关闭，而此时<code>old worker</code>已经被关闭了，client端当然不能正常处理请求，因为它所连接的server端已经被提前关闭了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>&emsp;&emsp;找到问题原因了当然接下来就是解决了，将<code> worker-shutdown-timeout</code>该字段的值增大为：3600s，即1小时，理论上这个时间足够该worker上的连接全部完成关闭了。</p><p>在调整了k8s上ingress的这个参数后，又进行了反复测试，并没有再次发现同样的问题，该问题得到解决。</p><h2 id="遗留"><a href="#遗留" class="headerlink" title="遗留"></a>遗留</h2><p>&emsp;&emsp;然后，为什么是<code>Seq=1</code>的连接会发生这个异常，还是没有完全想明白。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;在我们中应用有一个使用到&amp;#96;Http Long Poll&amp;#96;的场景，它需要一个http请求保持最长30秒，用于即使获取到最新的数据。在k8s环境下，发现应该存在偶发的异常，表现为长连接没有正常关闭，抛出异常：&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SocketException&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unexpected&lt;/span&gt; end of file from server&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://blog.jobshen.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://blog.jobshen.com/tags/k8s/"/>
    
    <category term="ingress" scheme="http://blog.jobshen.com/tags/ingress/"/>
    
    <category term="nginx" scheme="http://blog.jobshen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Centos-7下常见中间件环境的安装（三）</title>
    <link href="http://blog.jobshen.com/posts/3335490502.html"/>
    <id>http://blog.jobshen.com/posts/3335490502.html</id>
    <published>2017-12-17T12:29:46.000Z</published>
    <updated>2017-12-17T12:29:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;接着上篇文章，现在开始部署Redis集群，采用方案为四主四从，暂时不考虑搭建哨兵，因此需要八台机器，以下是部署过程中的一些记录。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">CPU、RAM</th></tr></thead><tbody><tr><td align="center">10.100.1.31</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.32</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.33</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.34</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.35</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.36</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.37</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.38</td><td align="center">16 vcpu、64G ram</td></tr></tbody></table><p><em>Redis 为内存数据库，因此机器内存必须较大，根据经验，Redis占用内存一般不能超过机器内存的一半，不否则Redis的性能就会开始下降</em></p><h3 id="Redis编译"><a href="#Redis编译" class="headerlink" title="Redis编译"></a>Redis编译</h3><p>由于Redis并不能通过包管理工具（例如 <em>yum</em>、<em>apt-get</em>等）进行快速安装，只能下载源码进行编译安装。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ curl -O http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.6.tar.gzjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ tar -zxf redis-4.0.6.tar.gzjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ ln -s redis-4.0.6 redisjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ cd redisjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis-Cluster-部署"><a href="#Redis-Cluster-部署" class="headerlink" title="Redis Cluster 部署"></a>Redis Cluster 部署</h2><h3 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h3><p>新建*<strong>cluster**<em>文件夹，以及新建</em></strong>redis.conf***文件并添加以下内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ mkdir clusterjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ vim cluster&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">bind 10.100.1.31 127.0.0.1protected-mode yesport 6379daemonize yessupervised systemdpidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pidlogfile &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis.log&quot;databases 16save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesdbfilename dump.rdbslave-serve-stale-data yesslave-read-only yesslave-priority 100maxmemory 34359738368appendonly yescluster-enabled yescluster-config-file nodes-6379.confcluster-node-timeout 15000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis-service"><a href="#Redis-service" class="headerlink" title="Redis.service"></a>Redis.service</h3><p>创建<em>systemd</em>服务，</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Unit]Description&#x3D;RedisAfter&#x3D;network.target[Service]ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis.conf --daemonize noExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&#x2F;redis-cli -h 127.0.0.1 -p 6379 shutdown[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ systemctl start redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建Redis集群"><a href="#创建Redis集群" class="headerlink" title="创建Redis集群"></a>创建Redis集群</h3><p>以下命令可以只在一台机器上执行，但为了后期维护Redis集群方便，可以在所有redis机器上都安装集群管理工具。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ gpg --keyserver hkp:&#x2F;&#x2F;keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDBjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ curl -sSL https:&#x2F;&#x2F;get.rvm.io | bash -s stablejobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ rvm install 2.4.3jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ rvm use 2.4.3 --default --createjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ gem install redisjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ .&#x2F;src&#x2F;redis-trib.rb create --replicas 1 10.100.1.31:6379 10.100.1.32:6379 10.100.1.33:6379 10.100.1.34:6379 10.100.1.35:6379 10.100.1.36:6379 10.100.1.37:6379 10.100.1.38:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>登入任意一台redis，查看集群信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;redis$ .&#x2F;src&#x2F;redis-cli -c -p 6369127.0.0.1:6379&gt; cluster nodes31f29a40699e44ae9b0dce5c8ded53cc92546c7f 10.100.1.31:6379@16379 master - 0 1513599855000 2 connected 4096-8191bd148fc244c821f0ebc502e2ef80e90e3ce8020f 10.100.1.32:6379@16379 master - 0 1513599857582 4 connected 12288-1638324c0c11cceb08a0a2c0f76773a1c3ecb5553fdd1 10.100.1.33:6379@16379 slave bd148fc244c821f0ebc502e2ef80e90e3ce8020f 0 1513599857000 8 connectedb8ed99aef612d728f69015b20dae32751af5a668 10.100.1.34:6379@16379 myself,master - 0 1513599854000 1 connected 0-4095ee420f56a64c89c519c82adf2131724456656711 10.100.1.35:6379@16379 slave b8ed99aef612d728f69015b20dae32751af5a668 0 1513599856000 5 connectedfa8f3b33ed93a8bb76c3f44b410436f12ca45d8c 10.100.1.36:6379@16379 slave 914483a3760cc5f7fc4422ea3326f39b0fc505b4 0 1513599854000 7 connected914483a3760cc5f7fc4422ea3326f39b0fc505b4 10.100.1.37:6379@16379 master - 0 1513599854000 3 connected 8192-12287da57f16f2f5b86cae95478157723c9b2972d460d 10.100.1.38:6379@16379 slave 31f29a40699e44ae9b0dce5c8ded53cc92546c7f 0 1513599854000 6 connected127.0.0.1:6379&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到现在为止，整个<em>Redis集群</em>的搭建就完成了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;接着上篇文章，现在开始部署Redis集群，采用方案为四主四从，暂时不考虑搭建哨兵，因此需要八台机器，以下是部署过程中的一些记录。&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="http://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="Redis" scheme="http://blog.jobshen.com/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="http://blog.jobshen.com/tags/Redis-Cluster/"/>
    
  </entry>
  
  <entry>
    <title>Centos-7下常见中间件环境的安装（二）</title>
    <link href="http://blog.jobshen.com/posts/2345740436.html"/>
    <id>http://blog.jobshen.com/posts/2345740436.html</id>
    <published>2017-12-09T12:53:12.000Z</published>
    <updated>2017-12-09T12:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;接着上篇文章，现在开始部署RocketMQ集群，采用的部署方案是阿里推荐的两主两从异步刷盘的模式，因此准备了四台服务器来进行MQ集群的部署，以下是部署过程中的一些记录，</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">CPU、RAM</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">10.100.1.21</td><td align="center">16 vcpu、64G ram</td><td align="center">broker-a master</td></tr><tr><td align="center">10.100.1.22</td><td align="center">16 vcpu、64G ram</td><td align="center">broker-b master</td></tr><tr><td align="center">10.100.1.23</td><td align="center">16 vcpu、64G ram</td><td align="center">nameserver、broker-a slave</td></tr><tr><td align="center">10.100.1.24</td><td align="center">16 vcpu、64G ram</td><td align="center">nameserver、broker-b-slave</td></tr></tbody></table><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>这次采用的是最新版本4.2.-0-SNAPSHOT，所以jdk需要采用 <em>jdk8</em> ，按照上一篇文章将jdk全部安装好。</p><h3 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h3><p>Apache现在并没有提供RocketMQ编译好的版本，所以只能自己下载源码进行编译，由于rocketmq是通过<strong>maven</strong>进行包管理的，所以要先安装maven。</p><ul><li>下载</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ curl -O http:&#x2F;&#x2F;mirrors.hust.edu.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.5.2&#x2F;binaries&#x2F;apache-maven-3.5.2-bin.tar.gzjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ tar -zxf apache-maven-3.5.2-bin.tar.gzjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ vim apache-maven-3.5.2&#x2F;conf&#x2F;settings.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>修改mirror 镜像源，改为阿里云的镜像：</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>external:*,!spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置环境变量</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ vim &#x2F;etc&#x2F;profile&#x2F;&#x2F; 在末尾添加以下内容export M2_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.5.2&#x2F;binexport PATH&#x3D;$M2_HOME&#x2F;bin:$PATH&#x2F;&#x2F; 保存 使其生效jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RocketMQ-编译"><a href="#RocketMQ-编译" class="headerlink" title="RocketMQ 编译"></a>RocketMQ 编译</h3><ul><li>克隆代码编译</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ git clone -b develop https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq.gitjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ cd rocketmqjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;rocketmq$ mvn -Prelease-all -DskipTests clean install -Ujobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;rocketmq$ cd distribution&#x2F;targetjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;rocketmq$ cp apache-rocketmq.tar.gz &#x2F;usr&#x2F;local&#x2F;apache-rocketmq.tar.gzjobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;rocketmq$ cd &#x2F;usr&#x2F;localjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ tar -zxf apache-rocketmq.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将压缩包拷贝到集群中所有机器，并解压</li></ul><h2 id="RocketMQ-部署"><a href="#RocketMQ-部署" class="headerlink" title="RocketMQ 部署"></a>RocketMQ 部署</h2><h3 id="修改目录配置信息"><a href="#修改目录配置信息" class="headerlink" title="修改目录配置信息"></a>修改目录配置信息</h3><ul><li>log 日志根目录 store 存储根目录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ mkdir -p rocketmq_data&#x2F;logs rocketmq_data&#x2F;store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改日志配置文件中路径</li></ul><p>将<code>logback_broker.xml </code> 、<code>logback_filtersrv.xml</code> 、<code>logback_broker.xml</code>、<code>logback_namesrv.xml</code>、<code>logback_tools.xml</code>中的<code>$&#123;user.home&#125;</code> 修改为 <code>/usr/local/rocketmq_data</code></p><h3 id="部署NameServer"><a href="#部署NameServer" class="headerlink" title="部署NameServer"></a>部署NameServer</h3><ul><li>在<code>10.100.1.23</code>、<code>10.100.1.24</code>两台机器上添加 <strong><em>nameserver</em></strong> 配置文件：<code>nameserver.properties</code>：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ mkdir apache-rocketmq&#x2F;conf&#x2F;productjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ vim apache-rocketmq&#x2F;conf&#x2F;product&#x2F;nameserver.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">rocketmqHome</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/apache-rocketmq</span><span class="token attr-name">kvConfigPath</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store/namesrv/kvConfig.json</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">9876</span><span class="token attr-name">serverWorkerThreads</span><span class="token punctuation">=</span><span class="token attr-value">16</span><span class="token attr-name">serverCallbackExecutorThreads</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">serverSelectorThreads</span><span class="token punctuation">=</span><span class="token attr-value">6</span><span class="token attr-name">serverOnewaySemaphoreValue</span><span class="token punctuation">=</span><span class="token attr-value">512</span><span class="token attr-name">serverAsyncSemaphoreValue</span><span class="token punctuation">=</span><span class="token attr-value">128</span><span class="token attr-name">serverChannelMaxIdleTimeSeconds</span><span class="token punctuation">=</span><span class="token attr-value">240</span><span class="token attr-name">serverSocketSndBufSize</span><span class="token punctuation">=</span><span class="token attr-value">4096</span><span class="token attr-name">serverSocketRcvBufSize</span><span class="token punctuation">=</span><span class="token attr-value">2048</span><span class="token attr-name">serverPooledByteBufAllocatorEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改<code>jvm</code>启动参数：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ vim bin&#x2F;runserver.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;sh# Licensed to the Apache Software Foundation (ASF) under one or more# contributor license agreements.  See the NOTICE file distributed with# this work for additional information regarding copyright ownership.# The ASF licenses this file to You under the Apache License, Version 2.0# (the &quot;License&quot;); you may not use this file except in compliance with# the License.  You may obtain a copy of the License at##     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# Java Environment Setting#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;error_exit ()&#123;    echo &quot;ERROR: $1 !!&quot;    exit 1&#125;[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;$HOME&#x2F;jdk&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;&#x2F;usr&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;export JAVA_HOMEexport JAVA&#x3D;&quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot;export BASE_DIR&#x3D;$(dirname $0)&#x2F;..export CLASSPATH&#x3D;.:$&#123;BASE_DIR&#125;&#x2F;conf:$&#123;CLASSPATH&#125;#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# JVM Configuration#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -server -Xms16g -Xmx16g -Xmn4g -XX:MetaspaceSize&#x3D;256m -XX:MaxMetaspaceSize&#x3D;1024m -XX:+AlwaysPreTouch -XX:-UseBiasedLocking&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize&#x3D;50m -XX:G1ReservePercent&#x3D;25 -XX:InitiatingHeapOccupancyPercent&#x3D;30&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles&#x3D;5 -XX:GCLogFileSize&#x3D;30m -verbose:gc -Xloggc:&#x2F;dev&#x2F;shm&#x2F;rmq_srv_gc.log -XX:+PrintGCDetails&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125;  -XX:-UseLargePages&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;ext:$&#123;BASE_DIR&#125;&#x2F;lib&quot;#JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9555,server&#x3D;y,suspend&#x3D;n&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;$JAVA $&#123;JAVA_OPT&#125; $@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>制作<code>systemd</code>脚本：namesrv.service</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;namesrv.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Unit]Description&#x3D;RocketMQ-NameserverAfter&#x3D;network.target[Service]ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;bin&#x2F;mqnamesrv -c &#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;conf&#x2F;product&#x2F;namesrv.propertiesExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;bin&#x2F;mqshutdown namesrv[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ ln -s &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;namesrv.service &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;namesrv.servicejobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动**<em>nameserver**</em></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ systemctl start namesrv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部署Broker"><a href="#部署Broker" class="headerlink" title="部署Broker"></a>部署Broker</h3><h4 id="部署broker-a"><a href="#部署broker-a" class="headerlink" title="部署broker-a"></a>部署broker-a</h4><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><ul><li>在<code>10.100.1.21</code>上新建<code>broker-a-master.properties</code>文件：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ mkdir apache-rocketmq&#x2F;conf&#x2F;productjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ vim apache-rocketmq&#x2F;conf&#x2F;product&#x2F;broker-a-master.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">rocketmqHome</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/apache-rocketmq</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.23:9876;10.100.1.24:9876</span><span class="token attr-name">brokerIP1</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.21</span><span class="token attr-name">brokerIP2</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.21</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">mq_a</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">ProductCluster</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">defaultTopicQueueNums</span><span class="token punctuation">=</span><span class="token attr-value">16</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">clusterTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">brokerTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">autoCreateSubscriptionGroup</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store/commitlog/</span><span class="token attr-name">storePathConsumerQueue</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store/consumequeue/</span><span class="token attr-name">mapedFileSizeCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">1073741824</span><span class="token attr-name">mapedFileSizeConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">6000000</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">diskMaxUsedSpaceRatio</span><span class="token punctuation">=</span><span class="token attr-value">75</span><span class="token attr-name">fileReserverdTime</span><span class="token punctuation">=</span><span class="token attr-value">72</span><span class="token attr-name">haListenPort</span><span class="token punctuation">=</span><span class="token attr-value">10912</span><span class="token attr-name">haSendHeartbeatInterval</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">haHousekeepingInterval</span><span class="token punctuation">=</span><span class="token attr-value">20000</span><span class="token attr-name">haTransferBatchSize</span><span class="token punctuation">=</span><span class="token attr-value">32768</span><span class="token attr-name">haMasterAddress</span><span class="token punctuation">=</span><span class="token attr-name">haSlaveFallbehindMax</span><span class="token punctuation">=</span><span class="token attr-value">268435456</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token attr-name">syncFlushTimeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">messageDelayLevel</span><span class="token punctuation">=</span><span class="token attr-value">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span><span class="token attr-name">flushDelayOffsetInterval</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token attr-name">cleanFileForciblyEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改<code>jvm</code>启动参数：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ vim bin&#x2F;runbroker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;sh# Licensed to the Apache Software Foundation (ASF) under one or more# contributor license agreements.  See the NOTICE file distributed with# this work for additional information regarding copyright ownership.# The ASF licenses this file to You under the Apache License, Version 2.0# (the &quot;License&quot;); you may not use this file except in compliance with# the License.  You may obtain a copy of the License at##     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# Java Environment Setting#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;error_exit ()&#123;    echo &quot;ERROR: $1 !!&quot;    exit 1&#125;[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;$HOME&#x2F;jdk&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;&#x2F;usr&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;export JAVA_HOMEexport JAVA&#x3D;&quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot;export BASE_DIR&#x3D;$(dirname $0)&#x2F;..export CLASSPATH&#x3D;.:$&#123;BASE_DIR&#125;&#x2F;conf:$&#123;CLASSPATH&#125;#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# JVM Configuration#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -server -Xms48g -Xmx48g -Xmn24g&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize&#x3D;64m -XX:G1ReservePercent&#x3D;25 -XX:InitiatingHeapOccupancyPercent&#x3D;30 -XX:SoftRefLRUPolicyMSPerMB&#x3D;0 -XX:SurvivorRatio&#x3D;8&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:&#x2F;dev&#x2F;shm&#x2F;mq_gc_%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles&#x3D;5 -XX:GCLogFileSize&#x3D;30m&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize&#x3D;20g&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;ext:$&#123;BASE_DIR&#125;&#x2F;lib&quot;#JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9555,server&#x3D;y,suspend&#x3D;n&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;numactl --interleave&#x3D;all pwd &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1if [ $? -eq 0 ]thenif [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; thennumactl --interleave&#x3D;all $JAVA $&#123;JAVA_OPT&#125; $@elsenumactl --cpunodebind&#x3D;$RMQ_NUMA_NODE --membind&#x3D;$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@fielse$JAVA $&#123;JAVA_OPT&#125; $@fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>制作<code>systemd</code>脚本：broker.service</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;broker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Unit]Description&#x3D;RocketMQ-BrokerAfter&#x3D;namesrv.service[Service]ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;bin&#x2F;mqbroker -c &#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;conf&#x2F;product&#x2F;broker-a-master.propertiesExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-rocketmq&#x2F;bin&#x2F;mqshutdown broker[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ ln -s &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;broker.service &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;broker.servicejobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动**<em>broker**</em></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ systemctl start broker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h5><ul><li>在<code>10.100.1.23</code>上新建<code>broker-a-slave.properties</code>文件：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local$ mkdir apache-rocketmq&#x2F;conf&#x2F;productjobshen@JobShen-PC:&#x2F;usr&#x2F;local$ vim apache-rocketmq&#x2F;conf&#x2F;product&#x2F;broker-a-slave.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">rocketmqHome</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/apache-rocketmq</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.23:9876;10.100.1.24:9876</span><span class="token attr-name">brokerIP1</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.23</span><span class="token attr-name">brokerIP2</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.23</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">mq_a</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">ProductCluster</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">defaultTopicQueueNums</span><span class="token punctuation">=</span><span class="token attr-value">16</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">clusterTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">brokerTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">autoCreateSubscriptionGroup</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store/commitlog/</span><span class="token attr-name">storePathConsumerQueue</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq_data/store/consumequeue/</span><span class="token attr-name">mapedFileSizeCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">1073741824</span><span class="token attr-name">mapedFileSizeConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">6000000</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">diskMaxUsedSpaceRatio</span><span class="token punctuation">=</span><span class="token attr-value">75</span><span class="token attr-name">fileReserverdTime</span><span class="token punctuation">=</span><span class="token attr-value">72</span><span class="token attr-name">haListenPort</span><span class="token punctuation">=</span><span class="token attr-value">10912</span><span class="token attr-name">haSendHeartbeatInterval</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">haHousekeepingInterval</span><span class="token punctuation">=</span><span class="token attr-value">20000</span><span class="token attr-name">haTransferBatchSize</span><span class="token punctuation">=</span><span class="token attr-value">32768</span><span class="token attr-name">haMasterAddress</span><span class="token punctuation">=</span><span class="token attr-name">haSlaveFallbehindMax</span><span class="token punctuation">=</span><span class="token attr-value">268435456</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token attr-name">syncFlushTimeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">messageDelayLevel</span><span class="token punctuation">=</span><span class="token attr-value">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span><span class="token attr-name">flushDelayOffsetInterval</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token attr-name">cleanFileForciblyEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改<code>jvm</code>启动参数：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;local&#x2F;apache-rocketmq$ vim bin&#x2F;runbroker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;sh# Licensed to the Apache Software Foundation (ASF) under one or more# contributor license agreements.  See the NOTICE file distributed with# this work for additional information regarding copyright ownership.# The ASF licenses this file to You under the Apache License, Version 2.0# (the &quot;License&quot;); you may not use this file except in compliance with# the License.  You may obtain a copy of the License at##     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# Java Environment Setting#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;error_exit ()&#123;    echo &quot;ERROR: $1 !!&quot;    exit 1&#125;[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;$HOME&#x2F;jdk&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; JAVA_HOME&#x3D;&#x2F;usr&#x2F;java[ ! -e &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;export JAVA_HOMEexport JAVA&#x3D;&quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot;export BASE_DIR&#x3D;$(dirname $0)&#x2F;..export CLASSPATH&#x3D;.:$&#123;BASE_DIR&#125;&#x2F;conf:$&#123;CLASSPATH&#125;#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# JVM Configuration#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -server -Xms32g -Xmx32g -Xmn16g&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize&#x3D;32m -XX:G1ReservePercent&#x3D;25 -XX:InitiatingHeapOccupancyPercent&#x3D;30 -XX:SoftRefLRUPolicyMSPerMB&#x3D;0 -XX:SurvivorRatio&#x3D;8&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:&#x2F;dev&#x2F;shm&#x2F;mq_gc_%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles&#x3D;5 -XX:GCLogFileSize&#x3D;30m&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize&#x3D;15g&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;ext:$&#123;BASE_DIR&#125;&#x2F;lib&quot;#JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9555,server&#x3D;y,suspend&#x3D;n&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;JAVA_OPT&#x3D;&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;numactl --interleave&#x3D;all pwd &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1if [ $? -eq 0 ]thenif [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; thennumactl --interleave&#x3D;all $JAVA $&#123;JAVA_OPT&#125; $@elsenumactl --cpunodebind&#x3D;$RMQ_NUMA_NODE --membind&#x3D;$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@fielse$JAVA $&#123;JAVA_OPT&#125; $@fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>和**<em>master**</em>一样制作systemd 服务并启动</li></ul><h4 id="部署broker-b"><a href="#部署broker-b" class="headerlink" title="部署broker-b"></a>部署broker-b</h4><p>在<code>10.100.1.22</code>上部署*<strong>master**<em>，在<code>10.100.1.24</code>上部署</em></strong>slave*<strong>，方式和**<em>broker-a</em></strong>一样，只需要注意修改ip地址就可以了。</p><p>这样，到这里为止，MQ的部署就完成了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;接着上篇文章，现在开始部署RocketMQ集群，采用的部署方案是阿里推荐的两主两从异步刷盘的模式，因此准备了四台服务器来进行MQ集群的部署，以下是部署过程中的一些记录，&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="http://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="jdk" scheme="http://blog.jobshen.com/tags/jdk/"/>
    
    <category term="rocketmq" scheme="http://blog.jobshen.com/tags/rocketmq/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7下常见中间件环境的安装（一）</title>
    <link href="http://blog.jobshen.com/posts/3011500279.html"/>
    <id>http://blog.jobshen.com/posts/3011500279.html</id>
    <published>2017-12-07T12:54:37.000Z</published>
    <updated>2017-12-07T12:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近由于公司要切换IDC机房，新机房的服务器集群需要重新部署生产环境，于是又趁着这次机会把一些常用的中间件又重新部署了一次，版本有更新，部署方式也会有小变动，于是就有了这一系列的文档。整个系列主要是java运行环境下的中间件部署，也含有少量其他中间件的部署，像 <strong>Redis</strong>、 <strong>TiDB</strong> 等。</p><a id="more"></a><h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><p>jdk当然是必不可少的，任何java程序允许都不能脱离JVM环境，而通过jdk安装jvm是最常见的方式，由于一些原因，公司在生产环境并没有使用 <em>open-jdk</em> 而是仍然使用了 <em>oralce-jdk</em> ，因此就不能通过 <code>yum install open-jdk</code>的方式来安装了，只能通过下载 <em>rpm</em> 文件来进行安装。</p><h3 id="jdk下载"><a href="#jdk下载" class="headerlink" title="jdk下载"></a>jdk下载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24&#x3D;http%3A%2F%2Fwww.oracle.com%2F; oraclelicense&#x3D;accept-securebackup-cookie&quot; &quot;http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u151-b12&#x2F;e758a0de34e24606bca991d704f6dcbf&#x2F;jdk-8u151-linux-x64.rpm&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ rpm -ivh jdk-8u151-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ vim &#x2F;etc&#x2F;profile&#x2F;&#x2F; 在末尾添加以下内容export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;latestexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATHexport CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar&#x2F;&#x2F; 保存 使其生效jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Zookeeper-集群安装"><a href="#Zookeeper-集群安装" class="headerlink" title="Zookeeper 集群安装"></a>Zookeeper 集群安装</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">Port</th><th align="center">myid</th></tr></thead><tbody><tr><td align="center">10.100.1.11</td><td align="center">2181 2888 3888</td><td align="center">1</td></tr><tr><td align="center">10.100.1.12</td><td align="center">2181 2888 3888</td><td align="center">2</td></tr><tr><td align="center">10.100.1.13</td><td align="center">2181 2888 3888</td><td align="center">3</td></tr><tr><td align="center">10.100.1.14</td><td align="center">2181 2888 3888</td><td align="center">4</td></tr><tr><td align="center">10.100.1.15</td><td align="center">2181 2888 3888</td><td align="center">5</td></tr></tbody></table><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ curl -O https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;zookeeper&#x2F;stable&#x2F;zookeeper-3.4.10.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;mnt&#x2F;d&#x2F;download&#x2F;softwares$ tar -zxf zookeeper-3.4.10.tar.gz -C &#x2F;usr&#x2F;localjobshen@JobShen-PC:&#x2F;usr&#x2F;lcoal$ mkdir -p zk_data&#x2F;zookeeper zk_data&#x2F;zoo-logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="新建zoo-cfg"><a href="#新建zoo-cfg" class="headerlink" title="新建zoo.cfg"></a>新建zoo.cfg</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@JobShen-PC:&#x2F;usr&#x2F;lcoal$ vim zookeeper-3.4.10&#x2F;conf&#x2F;zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">tickTime</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token attr-name">initLimit</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">dataDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/zk_data/zookeeper</span><span class="token attr-name">dataLogDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/zk_data/zoo-logs</span><span class="token attr-name">clientPort</span><span class="token punctuation">=</span><span class="token attr-value">2181</span><span class="token attr-name">server.1</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.11:2888:3888</span><span class="token attr-name">server.2</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.12:2888:3888</span><span class="token attr-name">server.3</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.13:2888:3888</span><span class="token attr-name">server.4</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.14:2888:3888</span><span class="token attr-name">server.5</span><span class="token punctuation">=</span><span class="token attr-value">10.100.1.15:2888:3888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建myid"><a href="#新建myid" class="headerlink" title="新建myid"></a>新建myid</h3><p>分别在各台机器上，新建对于<em>myid</em>值的<code>myid</code>文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ echo &quot;1&quot; &gt; &#x2F;usr&#x2F;local&#x2F;zk_data&#x2F;zookeeper&#x2F;myidjobshen@10.100.1.12:&#x2F;usr&#x2F;lcoal$ echo &quot;2&quot; &gt; &#x2F;usr&#x2F;local&#x2F;zk_data&#x2F;zookeeper&#x2F;myidjobshen@10.100.1.13:&#x2F;usr&#x2F;lcoal$ echo &quot;3&quot; &gt; &#x2F;usr&#x2F;local&#x2F;zk_data&#x2F;zookeeper&#x2F;myidjobshen@10.100.1.14:&#x2F;usr&#x2F;lcoal$ echo &quot;4&quot; &gt; &#x2F;usr&#x2F;local&#x2F;zk_data&#x2F;zookeeper&#x2F;myidjobshen@10.100.1.15:&#x2F;usr&#x2F;lcoal$ echo &quot;5&quot; &gt; &#x2F;usr&#x2F;local&#x2F;zk_data&#x2F;zookeeper&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="制作Systemd脚本"><a href="#制作Systemd脚本" class="headerlink" title="制作Systemd脚本"></a>制作Systemd脚本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zookeeper.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper</span><span class="token attr-name">After</span><span class="token punctuation">=</span><span class="token attr-value">network.target</span>[Service]<span class="token attr-name">Environment</span><span class="token punctuation">=</span><span class="token attr-value">JAVA_HOME=/usr/java/default</span><span class="token attr-name">PIDFile</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/zk_data/zookeeper/zookeeper_server.pid</span><span class="token attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/zookeeper-3.4.10/bin/zkServer.sh start</span><span class="token attr-name">ExecStop</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/zookeeper-3.4.10/bin/zkServer.sh stop</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ ln -s &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;zookeeper.service &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zookeeper.servicejobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="启动zk集群"><a href="#启动zk集群" class="headerlink" title="启动zk集群"></a>启动zk集群</h3><p>在各个节点上分别启动zk：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ systemctl start zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查zk是否启动成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal$ cd zookeeper-3.4.10&#x2F;binjobshen@10.100.1.11:&#x2F;usr&#x2F;lcoal&#x2F;zookeeper-3.4.10&#x2F;bin$ .&#x2F;zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出以下内容即代表启动成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.10&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgMode: follower(master)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下篇文章将继续介绍 <em>RocketMQ</em>、 <em>Redis</em> 等集群的安装</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;最近由于公司要切换IDC机房，新机房的服务器集群需要重新部署生产环境，于是又趁着这次机会把一些常用的中间件又重新部署了一次，版本有更新，部署方式也会有小变动，于是就有了这一系列的文档。整个系列主要是java运行环境下的中间件部署，也含有少量其他中间件的部署，像 &lt;strong&gt;Redis&lt;/strong&gt;、 &lt;strong&gt;TiDB&lt;/strong&gt; 等。&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="http://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="Centos" scheme="http://blog.jobshen.com/tags/Centos/"/>
    
    <category term="jdk" scheme="http://blog.jobshen.com/tags/jdk/"/>
    
    <category term="zookeeper" scheme="http://blog.jobshen.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上Redis故障恢复和分析（二）</title>
    <link href="http://blog.jobshen.com/posts/1461710894.html"/>
    <id>http://blog.jobshen.com/posts/1461710894.html</id>
    <published>2017-09-21T12:08:56.000Z</published>
    <updated>2017-09-21T12:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常场景"><a href="#异常场景" class="headerlink" title="异常场景"></a>异常场景</h2><p>&emsp;&emsp;最近一段时间时不时就有开发人员向我反应：redis的key有点问题，帮我删个key值、怎么key没有过期，我明明设了过期时间的。一开始没有放心上，以为只是程序逻辑处理不当或者redis偶尔抽风，不用在意。可是渐渐反应的人多了，觉得可能不是这么简单了，于是就和相关的开发人员讨论了下，发现会出现异常的基本是以下两种场景：</p><a id="more"></a><ul><li><p>使用redis 的 <strong>incrBy</strong> 命令来防止重复提交，大致的redis交互如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; incrBy key 1 # 返回 1 表示正常 返回 &gt; 1  表示重复提交 直接 return&gt; expire key 5 # 5秒后过期&gt; del key # 正常业务逻辑走完后 显示删除key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用 redis （<strong>set</strong>  <strong>setnx</strong> <strong>setex **） +  **expire</strong> 组合命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; set |setnx | setex key&gt; expire key seconds # 设置失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>  由于系统中大量使用了第一种方式来防止重复提交，所以这个问题对业务影响还是很大的，redis具体现象为：</p><ul><li>设置incrby 第一次应该返回 <strong>1</strong> </li><li>实际上却返回了 <strong>2</strong> ，导致业务流程无法走完，并且key没有删除也没有设置过期时间</li></ul><h2 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h2><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>为了排查问题写了一个简单的小程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> first_id <span class="token operator">=</span> <span class="token number">500000000000000001L</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>first_id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> allDone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// incrby</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">testIncrby</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>                allDone<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">testIncrByAndDel</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>                allDone<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allDone<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish method test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelAndTTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> first_id <span class="token operator">=</span> <span class="token number">500000000000000001L</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>first_id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> allDone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">testDelAndTTL</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"walletMember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                allDone<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish walletMember keys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">testDelAndTTL</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"walletMember1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                allDone<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish walletMember1 keys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allDone<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish all keys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testIncrby</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> times <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        times <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> value <span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token string">"walletMember"</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125;: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrby"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"walletMember"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125;: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrby"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"walletMember"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> isSuccess <span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token string">"walletMember"</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSuccess<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>isSuccess<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125;: the expire method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrby"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> isSuccess<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"walletMember"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish &#123;&#125; method &#123;&#125; times. sleep 35 seconds"</span><span class="token punctuation">,</span> <span class="token string">"testIncrby"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>times <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testIncrByAndDel</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> times <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        times <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> value <span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token string">"walletMember1"</span><span class="token operator">+</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125; method: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrByAndDel"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"walletMember1"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125; method: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrByAndDel"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"walletMember1"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> isSuccess<span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token string">"walletMember"</span><span class="token operator">+</span>key<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isSuccess<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>isSuccess<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong in &#123;&#125;: the expire method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"testIncrByAndDel"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> isSuccess<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"walletMember1"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            redisOperator<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"walletMember1"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish &#123;&#125; method &#123;&#125; times. sleep 35 seconds"</span><span class="token punctuation">,</span> <span class="token string">"testIncrByAndDel"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>times <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testDelAndTTL</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> value <span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Long</span> ttl <span class="token operator">=</span> redisOperator<span class="token punctuation">.</span><span class="token function">getFastJsonRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"there is something wrong : key : &#123;&#125;, value : &#123;&#125;, ttl : &#123;&#125;"</span><span class="token punctuation">,</span> prefix <span class="token operator">+</span> key<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能是测试用例写的不好，线上线下都没有发现明显的问题，于是对代码做了调整：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test/redis"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createGoogleAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> numThreads <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>numThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--------------start------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">redis_incrby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">redis_incrby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> loops <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, return : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, expire : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, return : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, expire : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, return : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, expire : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, return : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, expire : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key : &#123;&#125;, finish."</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行几次后终于发现了问题：按照代码逻辑，每个<strong>key</strong>最后的<strong>value</strong>应该都为<strong>10000</strong>，然后有的key的结果大于10000，于是想到两种情况：</p><ul><li>1）客户端多发送了一次命令</li><li>2）redis 执行错误</li></ul><h3 id="验证原因"><a href="#验证原因" class="headerlink" title="验证原因"></a>验证原因</h3><p>为了验证到底是哪种原因，采取了以下方式：</p><ul><li><p>修改Jedis 源码：修改<strong>BinaryClient</strong>的<strong>incrBy</strong>方法，打印日志信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"key: &#123;&#125;, delta : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sendCommand</span><span class="token punctuation">(</span>INCRBY<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对redis进行监听，使用<strong>watch</strong>命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;redis-cli -c -h ip -p port watch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过<strong>tcpdump</strong> 对所有流量记录进行保存</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpdump -i eth0 -s 0 -w tcp.cap # 保存为.cap文件可以通过wireshark 进行分析<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>通过重新执行上面的测试代码，对日志文件进行筛选：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep 10001 nohup.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从中选取一个key：<strong>3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8</strong></p><p>然后继续筛选：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep &quot;key : 3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8 return : &quot; nohup.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仔细查看后发现：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-03.png" alt="value跳跃"></p><p>直接从 <strong>2698</strong> 跳跃到了 <strong>2700</strong></p><p>然后再筛选日志，发现以下内容：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-04.png" alt="重复"></p><p>连续执行了两次<strong>incrBy</strong>命令，然后再去查找同一时刻的redis watch记录，发现的确收到了两条<strong>INCRBY  3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8 1</strong>命令，那接下来就要搞清楚为什么会发起两次请求，于是轮到tcpdump了。</p><h3 id="wireshark-分析请求流量"><a href="#wireshark-分析请求流量" class="headerlink" title="wireshark 分析请求流量"></a>wireshark 分析请求流量</h3><p>将tcpdump的文件导入wireshark后，根据筛选条件进行筛选，最终找到了对应的tcp请求（Frame 698961）：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-05.png" alt="wireshark"></p><p>其中这行引起了我注意：**[Expert Info (Note/Sequence): This frame is a (suspected) retransmission]**</p><p>查询资料后发现，这种情况是出现在以下情形：</p><p>​    当tcp请求允许重试的前提下发现当前tcp请求过了<strong>timeout</strong>时间还没收到返回值，那么就发起一次重试，而重试的tcp请求在wireshark中就会被标记为**[Expert Info (Note/Sequence): This frame is a (suspected) retransmission]**。</p><p>于是原因很明显了，由于Jedis设置的超时时间过短，导致jedis发起了重试，最终导致了上述redis的异常情况。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>查询jedis配置文件，发现超时时间为500毫秒，</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-06.png" alt="jedis"></p><p>显然太短了，遂改为15秒，改完以下重新执行了几次测试程序，都没有再发现问题，然后修改线上代码。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>导致上述jedis请求超时的原因也有redis cluster的原因。查询发现线上集群存在这key分布不均匀的情况：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-07.png" alt="redis-key"></p><p>可以看出其中一个节点的key数量是其他节点的1.5倍，并且分析这些key发现他们访问的频率也很高，在一定程度上导致了jedis的超时，因此接下来要对redis集群进行优化。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常场景&quot;&gt;&lt;a href=&quot;#异常场景&quot; class=&quot;headerlink&quot; title=&quot;异常场景&quot;&gt;&lt;/a&gt;异常场景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近一段时间时不时就有开发人员向我反应：redis的key有点问题，帮我删个key值、怎么key没有过期，我明明设了过期时间的。一开始没有放心上，以为只是程序逻辑处理不当或者redis偶尔抽风，不用在意。可是渐渐反应的人多了，觉得可能不是这么简单了，于是就和相关的开发人员讨论了下，发现会出现异常的基本是以下两种场景：&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="http://blog.jobshen.com/categories/redis/"/>
    
    
    <category term="Redis" scheme="http://blog.jobshen.com/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="http://blog.jobshen.com/tags/Redis-Cluster/"/>
    
    <category term="Jedis" scheme="http://blog.jobshen.com/tags/Jedis/"/>
    
    <category term="Wireshark" scheme="http://blog.jobshen.com/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上Redis故障恢复和分析（一）</title>
    <link href="http://blog.jobshen.com/posts/1728650486.html"/>
    <id>http://blog.jobshen.com/posts/1728650486.html</id>
    <published>2017-09-20T14:37:20.000Z</published>
    <updated>2017-09-20T14:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>&emsp;&emsp;那天早上一到公司就有客服过来反应我们的App登录不了了，我赶紧试了一下登陆App，发现是可以登录的，就以为是个别现象没有在意。过了一会儿客服来反应更频繁了，这才意识到可能没有那么简单。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;一开始认为是服务器问题，检查了所有相关的应用服务器，应用是否正在运行，发现一切正常，cpu、内存、IO 都是正常的，没有异常；</p><p>然后考虑是否是代码层面问题（数据库问题被排除，因为一旦数据库出问题不可能只有一部分人受影响），于是去检查日志，发现有以下错误信息：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-01.png" alt="错误信息"></p><p>然后登陆redis控制台，一台一台测试，终于发现了有问题的那台机器：</p><p><img data-src="https://picture.jobshen.com/blog/redis/redis-02.png" alt="发现问题"></p><p>接下来要做的就很简单了，redis是集群部署，并且每个节点都有master-slave，因此直接kill该节点，问题修复，一切正常。</p><h2 id="寻找根本原因"><a href="#寻找根本原因" class="headerlink" title="寻找根本原因"></a>寻找根本原因</h2><p>&emsp;&emsp;但是这样做并不能解决根本问题，由于之前部署redis集群时考虑不够周全，没有配置redis日志，因此决定直接修改配置文件，逐个重启redis节点。这也就导致了再次故障，因为那个故障节点又被启动加入集群并且由于所有节点都经历了重启该节点又被设为master了。</p><p>这时去观察该节点redis的日志，终于发现了问题，满屏都是异常信息：</p><p> <strong>Can’t save in background: fork: Cannot allocate memory</strong>  </p><p>&emsp;&emsp;通过Google得知是由于机器内存不足导致的，遂检查机器内存，发现内存已被占用超过90%，于是赶紧增大机器内存，毕竟redis 数据都是存储在内存中，才能做到这么快的读写。</p><p>&emsp;&emsp;基于此，对整个redis集群的内存占用情况进行了一次排查，增大了机器内存，并且增加了对机器内存使用情况的监控防止再出现此类情况。</p><h2 id="又一个问题"><a href="#又一个问题" class="headerlink" title="又一个问题"></a>又一个问题</h2><p>&emsp;&emsp;好景不长，一个问题解决又来一个问题，对于redis操作出现了非预期结果，类似 incrBy +1 结果+2，执行expire 结果返回失败。</p><p>&emsp;&emsp;该问题的跟踪解决将在下一篇文章中介绍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;那天早上一到公司就有客服过来反应我们的App登录不了了，我赶紧试了一下登陆App，发现是可以登录的，就以为是个别现象没有在意。过了一会儿客服来反应更频繁了，这才意识到可能没有那么简单。&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="http://blog.jobshen.com/categories/redis/"/>
    
    
    <category term="Redis" scheme="http://blog.jobshen.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo和Github Page搭建个人Blog</title>
    <link href="http://blog.jobshen.com/posts/3873148614.html"/>
    <id>http://blog.jobshen.com/posts/3873148614.html</id>
    <published>2017-09-17T10:44:56.000Z</published>
    <updated>2017-09-17T10:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前使用wordpress在AWS上搭建的博客，但国内访问速度堪忧，而且费用也不少，于是觉得切到Github上，最终觉得通过Hexo和Github Page重新搭建博客，这篇文章只是为了记录搭建的过程，以防以后忘记（记性不好啊。。。）</p><a id="more"></a><h2 id="注册域名并绑定Github-Page"><a href="#注册域名并绑定Github-Page" class="headerlink" title="注册域名并绑定Github Page"></a>注册域名并绑定Github Page</h2><p>注册Github和域名就不多说了，网上一搜一大推，接着去Github新建一个仓库，名为个人ID加 <strong>github.io</strong>，例如我的就是kitdine.github.io:</p><p><img data-src="https://picture.jobshen.com/blog/hexo_github/snipaste_20170917_185841.png" alt="img"></p><p>然后在该仓库下找到一个文件 <strong>CNAME</strong>， 打开后将里面的值修改为你博客的域名，例如我的 <strong>blog.jobshen.com</strong></p><p><img data-src="https://picture.jobshen.com/blog/hexo_github/snipaste_20170917_191236.png" alt="img"></p><p>注册完域名后添加一条CNAME记录，然后解析到github Page的地址，我的域名是在Godaddy上注册，添加一个CNAME指向github.io，像这样：</p><p><img data-src="https://picture.jobshen.com/blog/hexo_github/snipaste_20170917_191445.png" alt="img"></p><p>这样你就可以通过自己的域名访问GitHub Page了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>之所以选择Hexo是因为Hexo看上去非常简洁而且支持Markdown，符合我的期望，安装也很方便。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Hexo 需要NodeJ.js和git</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm">nvm</a>。</p><p>cURL:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Wget:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ nvm install stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者您也可以下载 <a href="http://nodejs.org/">安装程序</a> 来安装。</p><blockquote><p>Windows 用户</p><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><h4 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration.html">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="http://embeddedjs.com/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">package.json<span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hexo-site"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-archive"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-category"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-index"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-tag"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-ejs"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-stylus"</span><span class="token operator">:</span> <span class="token string">"^0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-marked"</span><span class="token operator">:</span> <span class="token string">"^0.2.4"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-server"</span><span class="token operator">:</span> <span class="token string">"^0.1.2"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing.html">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes.html">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="NexT-主题"><a href="#NexT-主题" class="headerlink" title="NexT 主题"></a>NexT 主题</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 <a href="http://git-scm.com/">Git</a>， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p><ul><li>克隆最新版本</li></ul><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p><pre class="line-numbers language-none"><code class="language-none">$ cd your-hexo-site$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p><p>启用 NexT 主题</p><pre class="line-numbers language-none"><code class="language-none">theme: next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><pre class="line-numbers language-none"><code class="language-none">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><p><img data-src="https://picture.jobshen.com/blog/hexo_github/validation-default-scheme-mac.png" alt="img"></p><p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p><p>更多配置可以访问<a href="http://theme-next.iissnan.com/">NexT</a>获取。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>你可以执行下列命令来创建一篇新文章。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>不要处理我的文章</p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new photo &quot;My Gallery&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>修改 <code>_config.yml</code> 文件：</p><pre class="line-numbers language-none"><code class="language-none"># Directorysource_dir: sourcepublic_dir: path&#x2F;to&#x2F;your&#x2F;github&#x2F;resp # 指向本地仓库，方便提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 Hexo 生成静态文件快速而且简单。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate --watch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;之前使用wordpress在AWS上搭建的博客，但国内访问速度堪忧，而且费用也不少，于是觉得切到Github上，最终觉得通过Hexo和Github Page重新搭建博客，这篇文章只是为了记录搭建的过程，以防以后忘记（记性不好啊。。。）&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.jobshen.com/categories/hexo/"/>
    
    
    <category term="Hexo" scheme="http://blog.jobshen.com/tags/Hexo/"/>
    
    <category term="Github Page" scheme="http://blog.jobshen.com/tags/Github-Page/"/>
    
  </entry>
  
</feed>
