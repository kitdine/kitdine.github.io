<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一杯咖啡的时间</title>
  
  <subtitle>苦中作乐</subtitle>
  <link href="https://blog.jobshen.com/atom.xml" rel="self"/>
  
  <link href="https://blog.jobshen.com/"/>
  <updated>2022-08-27T14:34:03.688Z</updated>
  <id>https://blog.jobshen.com/</id>
  
  <author>
    <name>Job Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何更优雅的构建spring boot应用的镜像</title>
    <link href="https://blog.jobshen.com/posts/37111687.html"/>
    <id>https://blog.jobshen.com/posts/37111687.html</id>
    <published>2022-05-19T01:17:50.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在云原生的趋势下，越来越多的程序开始跑在容器上，而这就绕不开构建镜像这个操作，而镜像的大小又会关系到这个镜像的拉取时间、网络开销、磁盘占用等问题。因此如何能够更好的构建镜像就变得越来越重要了。</p><span id="more"></span><h2 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h2><h3 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h3><p>这里选用<code>ibm-semeru-runtimes:open-17.0.3_7-jre-focal</code>和<code>ibm-semeru-runtimes:open-17.0.3_7-jdk-focal</code>分别作为运行时和编译时的基础镜像。</p><p>这里都以gradle项目为例。</p><h3 id="最初方式"><a href="#最初方式" class="headerlink" title="最初方式"></a>最初方式</h3><p><code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jdk-focal</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/project</span><br><span class="line">./gradlew build</span><br><span class="line">docker build --build-arg JAR_FILE=build/libs/your-spring-boot-version.jar -t myorg/myapp .</span><br></pre></td></tr></table></figure><p>这种方式其实是将编译过程放在了外面，就会显得不那么优雅。因此我们决定将其放入image build 环节。</p><h3 id="先编译"><a href="#先编译" class="headerlink" title="先编译"></a>先编译</h3><p><code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jdk-focal</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./gradlew build &amp;&amp; /</span></span><br><span class="line">cp build/libs/your-application-version.jar /app.jar <span class="comment"># &amp;&amp; 是为了减少RUN指令，从而减少layer</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myorg/myapp .</span><br></pre></td></tr></table></figure><p>此时你会发现这个image里包含了很多不必要的文件，都是在编译过程中生成的。这我们应该怎么优化呢，此时就要用到Docker的多阶段编译（<code>Multi-Stage Build</code>）功能了。</p><p><img data-src="https://pic.jobshen.com/2022/05/bbcb27ba8cc85a4d8b9f84ae623011ad.gif" alt="img"></p><h3 id="Multi-Stage-Build"><a href="#Multi-Stage-Build" class="headerlink" title="Multi-Stage Build"></a>Multi-Stage Build</h3><p><code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jdk-focal as builder</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./gradlew build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jre-focal</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /build/libs/your-application-version.jar /app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$&#123;JAVA_OPTS&#125;</span> <span class="variable">$&#123;JAVA_TOOL_OPTIONS&#125;</span> -jar app.jar <span class="variable">$&#123;0&#125;</span> <span class="variable">$&#123;@&#125;</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myorg/myapp .</span><br></pre></td></tr></table></figure><p>咋一看目前的<code>dockerfile</code>已经足够完美了，似乎已经没有什么可以优化的了。其实不然，目前的image其实还是很大的，docker构建镜像是通过layer来进行叠加，从而达到能够复用已存在的模块来减少新版本镜像的改动部分大小，从而减少网络传输。</p><p>那layers是怎么生成的呢，其实很简单就是根据你<code>Dockerfile</code>里的一行行指令，每个指令都对应一个layer：</p><p><img data-src="https://pic.jobshen.com/2022/05/d4a73968c4c8f18a9ee89733292430f4.gif" alt="img"></p><p>而<code>spring boot</code>build产生的jar包其实是一个**<code>fat jar</code>**，里面除了你自己应用的代码其他绝大部分都是可以复用的，因此我们可以对其进行分解处理。</p><h3 id="Spring-Boot-Layer-Index"><a href="#Spring-Boot-Layer-Index" class="headerlink" title="Spring Boot Layer Index"></a>Spring Boot Layer Index</h3><p>当然这个有个前提条件，需要spring boot 版本大于 <code>2.3.0</code>。</p><p><code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jdk-focal as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./gradlew build </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> extracted &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /workspace/app/build/libs &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    java -Djarmode=layertools -jar app.jar extract --destination  /workspace/app/extracted</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jre-focal</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> EXTRACTED=/workspace/app/extracted</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/dependencies/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/spring-boot-loader/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/snapshot-dependencies/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/application/ ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$&#123;JAVA_OPTS&#125;</span> <span class="variable">$&#123;JAVA_TOOL_OPTIONS&#125;</span> org.springframework.boot.loader.JarLauncher <span class="variable">$&#123;0&#125;</span> <span class="variable">$&#123;@&#125;</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myorg/myapp .</span><br></pre></td></tr></table></figure><h3 id="Cache-Build-Dependencies"><a href="#Cache-Build-Dependencies" class="headerlink" title="Cache Build Dependencies"></a>Cache Build Dependencies</h3><p>目前的dockerfile你会发现，每次进行build时，都会先下载gradle，然后下载相关依赖包，会占用极大的带宽以及消耗大量时间，那这些数据是否可以共享呢，答案是当然可以了。</p><p><code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:experimental</span></span><br><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jdk-focal as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/root/.gradle ./gradlew build </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> extracted &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /workspace/app/build/libs &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    java -Djarmode=layertools -jar app.jar extract --destination  /workspace/app/extracted</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ibm-semeru-runtimes:open-<span class="number">17.0</span>.<span class="number">3</span>_7-jre-focal</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> EXTRACTED=/workspace/app/extracted</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/dependencies/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/spring-boot-loader/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/snapshot-dependencies/ ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder <span class="variable">$&#123;EXTRACTED&#125;</span>/application/ ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$&#123;JAVA_OPTS&#125;</span> <span class="variable">$&#123;JAVA_TOOL_OPTIONS&#125;</span> org.springframework.boot.loader.JarLauncher <span class="variable">$&#123;0&#125;</span> <span class="variable">$&#123;@&#125;</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>shell</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myorg/myapp .</span><br></pre></td></tr></table></figure><p>到目前为止对于image的优化，已经基本完成了，大家可以通过以下命令来观察每个image的各个layer的大小已经images之间的关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history myorg/myapp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在云原生的趋势下，越来越多的程序开始跑在容器上，而这就绕不开构建镜像这个操作，而镜像的大小又会关系到这个镜像的拉取时间、网络开销、磁盘占用等问题。因此如何能够更好的构建镜像就变得越来越重要了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="spring boot" scheme="https://blog.jobshen.com/tags/spring-boot/"/>
    
    <category term="docker image" scheme="https://blog.jobshen.com/tags/docker-image/"/>
    
  </entry>
  
  <entry>
    <title>博客小更新记录</title>
    <link href="https://blog.jobshen.com/posts/9c89066f.html"/>
    <id>https://blog.jobshen.com/posts/9c89066f.html</id>
    <published>2022-05-13T10:39:11.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<p>之前blog一直是通过hexo+GitHub page部署的，那是还没有GitHub actions，每次操作都无比复杂，最近有时间就做个小更新，记录下更改点。</p><span id="more"></span><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><p>这个肯定是这次的重中之重！其实流程也是很简单。</p><h3 id="Repos"><a href="#Repos" class="headerlink" title="Repos"></a>Repos</h3><p>推荐使用两个repo的模式，一个blog的repo，设置成<code>private</code>，原因是仓库里可能会包含一些系统的<code>secretKey</code>等信息，不适合对外暴露，而另一个就是GitHub Page的repo。</p><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><p>简要流程如下，我们假设博客原始仓库为<strong>A</strong>，Page仓库为<strong>B</strong>：</p><ul><li>生成ssh key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -f github-deploy-key</span></span><br></pre></td></tr></table></figure><p>然后一路按几次回车就完成生成工作了，最后在目录下会生成 <code>github-deploy-key</code> 私钥 和 <code>github-deploy-key.pub</code> 公钥两个文件。</p><ul><li><p>配置公钥</p><p>复制 github-deploy-key.pub 文件里的内容，在<strong>B</strong>仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加 SSH 公钥：</p><ul><li>Title 填写 HEXO_DEPLOY_PUB</li><li>Key 填写 github-deploy-key.pub 文件内容</li><li>勾选 Allow write access 选项</li></ul><p><img data-src="https://pic.jobshen.com/2022/05/b90404061c4366c0b9049b575ac65d9f.png" alt="image-20220514094036069"></p></li><li><p>配置私钥</p></li></ul><p>复制 github-deploy-key 文件里的内容，在<strong>A</strong>仓库 <code>Settings</code> -&gt; <code>Secrets</code> -&gt;<code>Actions</code> -&gt; <code>Add a new secret</code> 页面上添加 SSH 私钥：</p><ul><li>Name 填写 HEXO_DEPLOY_PRI。</li><li>Value 填写 github-deploy-key 文件内容。</li></ul><p><img data-src="https://pic.jobshen.com/2022/05/1cd21dd520b6224b8a1d5d1cea8be618.png" alt="image-20220514094119400"></p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>在<strong>A</strong>仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，最后的目录结构应该是这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p><code>deploy.yml</code> 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths-ignore:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_drafts/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.github/**&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">commit_msg:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;ion)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Hexo-deploy"><a href="#Hexo-deploy" class="headerlink" title="Hexo deploy"></a>Hexo deploy</h3><p>在A仓库的源码中，对hexo进行配置，添加deploy支持，修改<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">your</span> <span class="string">B</span> <span class="string">repo</span> <span class="string">ssh</span> <span class="string">git</span> <span class="string">address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-theme-更新"><a href="#Hexo-theme-更新" class="headerlink" title="Hexo theme 更新"></a>Hexo theme 更新</h2><p>这里仍然使用[NEXT](<a href="https://theme-next.js.org/">NexT - Theme for Hexo (theme-next.js.org)</a>)。但是修改了引入方式，从原来的<code>clone</code>改为<code>yarn add hexo-theme-next</code>，相关主题配置修改通过Hexo提供的<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">Alternate Theme Config</a>方式。整个repo的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A (repository)</span><br><span class="line">└── _config.yml -- hexo 主配置文件</span><br><span class="line">└── _config.next.yml-- next 主题配置文件</span><br></pre></td></tr></table></figure><h3 id="分析统计配置"><a href="#分析统计配置" class="headerlink" title="分析统计配置"></a>分析统计配置</h3><p>阅读量统计原来是通过<code>leancloud</code>统计的，但是由于现在需要实名认证以及备案，就切换到<code>google firebase</code>了，这样统计和分析都使用了Google的服务，只是对于国内的访问无法统计到，这个后续再看怎么解决吧。</p><h2 id="图床优化"><a href="#图床优化" class="headerlink" title="图床优化"></a>图床优化</h2><p>之前图床一直使用的是<code>AWS S3</code>，然后由于其只提供<code>HTTP</code>方式，和主站<code>HTTPS</code>的方式可能会存在访问异常问题，遂通过<code>AWS Cloudfront</code>进行一次中转，这样就可以通过<code>HTTPS</code>的方式访问<code>S3</code>服务了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前blog一直是通过hexo+GitHub page部署的，那是还没有GitHub actions，每次操作都无比复杂，最近有时间就做个小更新，记录下更改点。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="https://blog.jobshen.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://blog.jobshen.com/tags/hexo/"/>
    
    <category term="next" scheme="https://blog.jobshen.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat 浅析（二）</title>
    <link href="https://blog.jobshen.com/posts/5be0aa9e.html"/>
    <id>https://blog.jobshen.com/posts/5be0aa9e.html</id>
    <published>2021-02-17T04:24:14.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说完了<code>filebeat</code>的基础架构和相关设计后，我们就来看下<code>filebeat</code>是如何来实现这些功能的。这里只对几个相对来说比较重要的几个流程进行讨论。其余的设计会在之后的文章中进行阐述。几个流程为：</p><ul><li>启动过程</li><li>harvester 监听过程（以log为例）</li><li>outputs 处理流程（以kafka为例）</li></ul><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>首先当然是找到入口函数，对于<code>go</code>应用来说很简单，直接找<code>main()</code>就可以了。因此我们可以看到：<code>beats/filebeat/main.go</code>的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/filebeat/cmd&quot;</span></span><br><span class="line">inputs <span class="string">&quot;github.com/elastic/beats/v7/filebeat/input/default-inputs&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The basic model of execution:</span></span><br><span class="line"><span class="comment">// - input: finds files in paths/globs to harvest, starts harvesters</span></span><br><span class="line"><span class="comment">// - harvester: reads a file, sends events to the spooler</span></span><br><span class="line"><span class="comment">// - spooler: buffers events until ready to flush to the publisher</span></span><br><span class="line"><span class="comment">// - publisher: writes to the network, notifies registrar</span></span><br><span class="line"><span class="comment">// - registrar: records positions of files read</span></span><br><span class="line"><span class="comment">// Finally, input uses the registrar information, on restart, to</span></span><br><span class="line"><span class="comment">// determine where in each file to restart a harvester.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := cmd.Filebeat(inputs.Init).Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>ipnuts.Init</code>是用来获取该<code>filebeat</code>在之前的一些状态信息或者初始化一份状态信息，主要是用来记录目前<code>harvester</code>已监听到、采集到的<code>offset</code>相关信息。<code>cmd.Filebeat</code>用来初始化一个<code>Filebeat</code>对象。<code>cmd.root.Filebeat()</code>，加载&amp;初始化相关的配置，以及构建<code>filebeat</code>对象。下面代码里的<code>beater.New</code>方法会构建了<code>filebeat</code>对象。<code>GenRootCmdWithSettings</code>方法内会构建启动<code>filebeat</code>相关命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Filebeat build the beat root command for executing filebeat and it&#x27;s subcommands.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Filebeat</span><span class="params">(inputs beater.PluginFactory)</span></span> *cmd.BeatsRootCmd &#123;</span><br><span class="line"><span class="keyword">var</span> runFlags = pflag.NewFlagSet(Name, pflag.ExitOnError)</span><br><span class="line">runFlags.AddGoFlag(flag.CommandLine.Lookup(<span class="string">&quot;once&quot;</span>))</span><br><span class="line">runFlags.AddGoFlag(flag.CommandLine.Lookup(<span class="string">&quot;modules&quot;</span>))</span><br><span class="line">settings := instance.Settings&#123;</span><br><span class="line">RunFlags:      runFlags,</span><br><span class="line">Name:          Name,</span><br><span class="line">HasDashboards: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主要是这行代码</span></span><br><span class="line">command := cmd.GenRootCmdWithSettings(beater.New(inputs), settings)</span><br><span class="line">  </span><br><span class="line">command.PersistentFlags().AddGoFlag(flag.CommandLine.Lookup(<span class="string">&quot;M&quot;</span>))</span><br><span class="line">command.TestCmd.Flags().AddGoFlag(flag.CommandLine.Lookup(<span class="string">&quot;modules&quot;</span>))</span><br><span class="line">command.SetupCmd.Flags().AddGoFlag(flag.CommandLine.Lookup(<span class="string">&quot;modules&quot;</span>))</span><br><span class="line">command.AddCommand(cmd.GenModulesCmd(Name, <span class="string">&quot;&quot;</span>, buildModulesManager))</span><br><span class="line">command.AddCommand(genGenerateCmd())</span><br><span class="line"><span class="keyword">return</span> command</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GenRootCmdWithSettings</code>函数在<code>filebeat/libbeat/cmd/root.go</code>文件内。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenRootCmdWithSettings</span><span class="params">(beatCreator beat.Creator, settings instance.Settings)</span></span> *BeatsRootCmd &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">rootCmd.RunCmd = genRunCmd(settings, beatCreator)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> rootCmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此函数内会调用<code>filebeat/libbeat/cmd/run.go</code>文件内的<code>func genRunCmd(settings instance.Settings, beatCreator beat.Creator) *cobra.Command</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genRunCmd</span><span class="params">(settings instance.Settings, beatCreator beat.Creator)</span></span> *cobra.Command &#123;</span><br><span class="line">name := settings.Name</span><br><span class="line">runCmd := cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Short: <span class="string">&quot;Run &quot;</span> + name,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">err := instance.Run(settings, beatCreator)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据方法名字就能关注到重点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.Run(settings, beatCreator)</span><br></pre></td></tr></table></figure><p><code>Run</code>方法内会构建<code>Beat</code>对象，并调用<code>launch</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run initializes and runs a Beater implementation. name is the name of the</span></span><br><span class="line"><span class="comment">// Beat (e.g. packetbeat or metricbeat). version is version number of the Beater</span></span><br><span class="line"><span class="comment">// implementation. bt is the `Creator` callback for creating a new beater</span></span><br><span class="line"><span class="comment">// instance.</span></span><br><span class="line"><span class="comment">// XXX Move this as a *Beat method?</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(settings Settings, bt beat.Creator)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> handleError(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    b, err := NewBeat(name, idxPrefix, version)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> b.launch(settings, bt)</span><br><span class="line">  &#125;())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>launch</code>方法内又构建了<code>Beater</code>对象(<code>Beater</code>是个接口)，并且在最后调用了<code>Beater</code>接口的<code>Run</code>方法启动。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Beat)</span></span> launch(settings Settings, bt beat.Creator) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">beater, err := b.createBeater(bt)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> beater.Run(&amp;b.Beat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口有多个实现，但是我们这里只需要关注一个，文件<code>filebeat/beater/filebeat.go</code>文件内的<code>Run</code>方法，这里就是启动<code>filebeat</code>的实现。</p><p>在<code>Run</code>方法内，会构建一个<code>crawler</code>对象，此对象用来采集数据，工作原理其实是对<code>Inputs</code>的包装，<code>Inputs</code>就是<code>filebeat</code>官网介绍的核心组件之一。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run allows the beater to be run as a beat.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fb *Filebeat)</span></span> Run(b *beat.Beat) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">config := fb.config</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !fb.moduleRegistry.Empty() &#123;</span><br><span class="line">err = fb.loadModulesPipelines(b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建相关统计信息的chan</span></span><br><span class="line">waitFinished := newSignalWait()</span><br><span class="line">waitEvents := newSignalWait()</span><br><span class="line"></span><br><span class="line"><span class="comment">// count active events for waiting on shutdown</span></span><br><span class="line">wgEvents := &amp;eventCounter&#123;</span><br><span class="line">count: monitoring.NewInt(<span class="literal">nil</span>, <span class="string">&quot;filebeat.events.active&quot;</span>),</span><br><span class="line">added: monitoring.NewUint(<span class="literal">nil</span>, <span class="string">&quot;filebeat.events.added&quot;</span>),</span><br><span class="line">done:  monitoring.NewUint(<span class="literal">nil</span>, <span class="string">&quot;filebeat.events.done&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line">finishedLogger := newFinishedLogger(wgEvents)</span><br><span class="line"></span><br><span class="line">registryMigrator := registrar.NewMigrator(config.Registry)</span><br><span class="line"><span class="keyword">if</span> err := registryMigrator.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Failed to migrate registry file: %+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// input 对于file的 相关进度信息，offset等</span></span><br><span class="line">stateStore, err := openStateStore(b.Info, logp.NewLogger(<span class="string">&quot;filebeat&quot;</span>), config.Registry)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Failed to open state store: %+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> stateStore.Close()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建一个register 用以保存相关数据</span></span><br><span class="line"><span class="comment">// Setup registrar to persist state</span></span><br><span class="line">registrar, err := registrar.New(stateStore, finishedLogger, config.Registry.FlushTimeout)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Could not init registrar: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure all events that were published in</span></span><br><span class="line">registrarChannel := newRegistrarLogger(registrar)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建相关pipeline，internal queu，将上下游形成一个闭环</span></span><br><span class="line">  <span class="comment">// input --&gt; harvester --&gt; event --&gt; processors --&gt; queue --&gt; publisher --&gt; outputs</span></span><br><span class="line"><span class="comment">// setup event counting for startup and a global common ACKer, such that all events will be</span></span><br><span class="line"><span class="comment">// routed to the reigstrar after they&#x27;ve been ACKed.</span></span><br><span class="line"><span class="comment">// Events with Private==nil or the type of private != file.State are directly</span></span><br><span class="line"><span class="comment">// forwarded to `finishedLogger`. Events from the `logs` input will first be forwarded</span></span><br><span class="line"><span class="comment">// to the registrar via `registrarChannel`, which finally forwards the events to finishedLogger as well.</span></span><br><span class="line"><span class="comment">// The finishedLogger decrements the counters in wgEvents after all events have been securely processed</span></span><br><span class="line"><span class="comment">// by the registry.</span></span><br><span class="line">fb.pipeline = withPipelineEventCounter(b.Publisher, wgEvents)</span><br><span class="line">fb.pipeline = pipetool.WithACKer(fb.pipeline, eventACKer(finishedLogger, registrarChannel))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filebeat by default required infinite retry. Let&#x27;s configure this for all</span></span><br><span class="line"><span class="comment">// inputs by default.  Inputs (and InputController) can overwrite the sending</span></span><br><span class="line"><span class="comment">// guarantees explicitly when connecting with the pipeline.</span></span><br><span class="line">fb.pipeline = pipetool.WithDefaultGuarantees(fb.pipeline, beat.GuaranteedSend)</span><br><span class="line"></span><br><span class="line">outDone := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;) <span class="comment">// outDone closes down all active pipeline connections</span></span><br><span class="line">pipelineConnector := channel.NewOutletFactory(outDone).Create</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a ES connection factory for dynamic modules pipeline loading</span></span><br><span class="line"><span class="keyword">var</span> pipelineLoaderFactory fileset.PipelineLoaderFactory</span><br><span class="line"><span class="keyword">if</span> b.Config.Output.Name() == <span class="string">&quot;elasticsearch&quot;</span> &#123;</span><br><span class="line">pipelineLoaderFactory = newPipelineLoaderFactory(b.Config.Output.Config())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logp.Warn(pipelinesWarning)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputsLogger := logp.NewLogger(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">v2Inputs := fb.pluginFactory(b.Info, inputsLogger, stateStore)</span><br><span class="line">v2InputLoader, err := v2.NewLoader(inputsLogger, v2Inputs, <span class="string">&quot;type&quot;</span>, cfg.DefaultType)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">// loader detected invalid state.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputTaskGroup unison.TaskGroup</span><br><span class="line"><span class="keyword">defer</span> inputTaskGroup.Stop()</span><br><span class="line"><span class="keyword">if</span> err := v2InputLoader.Init(&amp;inputTaskGroup, v2.ModeRun); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Failed to initialize the input managers: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputLoader := channel.RunnerFactoryWithCommonInputSettings(b.Info, compat.Combine(</span><br><span class="line">compat.RunnerFactory(inputsLogger, b.Info, v2InputLoader),</span><br><span class="line">input.NewRunnerFactory(pipelineConnector, registrar, fb.done),</span><br><span class="line">))</span><br><span class="line">moduleLoader := fileset.NewFactory(inputLoader, b.Info, pipelineLoaderFactory, config.OverwritePipelines)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// input 相关</span></span><br><span class="line">crawler, err := newCrawler(inputLoader, moduleLoader, config.Inputs, fb.done, *once)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Could not init crawler: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The order of starting and stopping is important. Stopping is inverted to the starting order.</span></span><br><span class="line"><span class="comment">// The current order is: registrar, publisher, spooler, crawler</span></span><br><span class="line"><span class="comment">// That means, crawler is stopped first.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the registrar</span></span><br><span class="line">err = registrar.Start()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Could not start registrar: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stopping registrar will write last state</span></span><br><span class="line"><span class="keyword">defer</span> registrar.Stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stopping publisher (might potentially drop items)</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Closes first the registrar logger to make sure not more events arrive at the registrar</span></span><br><span class="line"><span class="comment">// registrarChannel must be closed first to potentially unblock (pretty unlikely) the publisher</span></span><br><span class="line">registrarChannel.Close()</span><br><span class="line"><span class="built_in">close</span>(outDone) <span class="comment">// finally close all active connections to publisher pipeline</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for all events to be processed or timeout</span></span><br><span class="line"><span class="keyword">defer</span> waitEvents.Wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.OverwritePipelines &#123;</span><br><span class="line">logp.Debug(<span class="string">&quot;modules&quot;</span>, <span class="string">&quot;Existing Ingest pipelines will be updated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = crawler.Start(fb.pipeline, config.ConfigInput, config.ConfigModules)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">crawler.Stop()</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Failed to start crawler: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If run once, add crawler completion check as alternative to done signal</span></span><br><span class="line"><span class="keyword">if</span> *once &#123;</span><br><span class="line">runOnce := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">logp.Info(<span class="string">&quot;Running filebeat once. Waiting for completion ...&quot;</span>)</span><br><span class="line">crawler.WaitForCompletion()</span><br><span class="line">logp.Info(<span class="string">&quot;All data collection completed. Shutting down.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">waitFinished.Add(runOnce)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register reloadable list of inputs and modules</span></span><br><span class="line">inputs := cfgfile.NewRunnerList(management.DebugK, inputLoader, fb.pipeline)</span><br><span class="line">reload.Register.MustRegisterList(<span class="string">&quot;filebeat.inputs&quot;</span>, inputs)</span><br><span class="line"><span class="comment">// modules 载入</span></span><br><span class="line">modules := cfgfile.NewRunnerList(management.DebugK, moduleLoader, fb.pipeline)</span><br><span class="line">reload.Register.MustRegisterList(<span class="string">&quot;filebeat.modules&quot;</span>, modules)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> adiscover *autodiscover.Autodiscover</span><br><span class="line"><span class="keyword">if</span> fb.config.Autodiscover != <span class="literal">nil</span> &#123;</span><br><span class="line">adiscover, err = autodiscover.NewAutodiscover(</span><br><span class="line"><span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">fb.pipeline,</span><br><span class="line">cfgfile.MultiplexedRunnerFactory(</span><br><span class="line">cfgfile.MatchHasField(<span class="string">&quot;module&quot;</span>, moduleLoader),</span><br><span class="line">cfgfile.MatchDefault(inputLoader),</span><br><span class="line">),</span><br><span class="line">autodiscover.QueryConfig(),</span><br><span class="line">config.Autodiscover,</span><br><span class="line">b.Keystore,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">adiscover.Start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add done channel to wait for shutdown signal</span></span><br><span class="line">waitFinished.AddChan(fb.done)</span><br><span class="line">waitFinished.Wait()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop reloadable lists, autodiscover -&gt; Stop crawler -&gt; stop inputs -&gt; stop harvesters</span></span><br><span class="line"><span class="comment">// Note: waiting for crawlers to stop here in order to install wgEvents.Wait</span></span><br><span class="line"><span class="comment">//       after all events have been enqueued for publishing. Otherwise wgEvents.Wait</span></span><br><span class="line"><span class="comment">//       or publisher might panic due to concurrent updates.</span></span><br><span class="line">inputs.Stop()</span><br><span class="line">modules.Stop()</span><br><span class="line">adiscover.Stop()</span><br><span class="line">crawler.Stop()</span><br><span class="line"></span><br><span class="line">timeout := fb.config.ShutdownTimeout</span><br><span class="line"><span class="comment">// Checks if on shutdown it should wait for all events to be published</span></span><br><span class="line">waitPublished := fb.config.ShutdownTimeout &gt; <span class="number">0</span> || *once</span><br><span class="line"><span class="keyword">if</span> waitPublished &#123;</span><br><span class="line"><span class="comment">// Wait for registrar to finish writing registry</span></span><br><span class="line">waitEvents.Add(withLog(wgEvents.Wait,</span><br><span class="line"><span class="string">&quot;Continue shutdown: All enqueued events being published.&quot;</span>))</span><br><span class="line"><span class="comment">// Wait for either timeout or all events having been ACKed by outputs.</span></span><br><span class="line"><span class="keyword">if</span> fb.config.ShutdownTimeout &gt; <span class="number">0</span> &#123;</span><br><span class="line">logp.Info(<span class="string">&quot;Shutdown output timer started. Waiting for max %v.&quot;</span>, timeout)</span><br><span class="line">waitEvents.Add(withLog(waitDuration(timeout),</span><br><span class="line"><span class="string">&quot;Continue shutdown: Time out waiting for events being published.&quot;</span>))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">waitEvents.AddChan(fb.done)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个<code>filebeat</code>启动流程基本清晰了。</p><h2 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h2><p>数据采集其实就是由<code>crawler</code>来完成的，他的主要组件就是<code>harvester</code>。那我们现在就来先看<code>crawler</code>的创建过程，入口函数在<code>filebeat/beater/filebeat.go</code>文件内的<code>Run</code>方法中的<code>crawler, err := newCrawler(inputLoader, moduleLoader, config.Inputs, fb.done, *once)</code>，具体在<code>filebeat/beater/crawler.go</code>中，然后就是启动err &#x3D; crawler.Start(fb.pipeline, config.ConfigInput, config.ConfigModules)&#96;，具体看这个方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start starts the crawler with all inputs</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *crawler)</span></span> Start(</span><br><span class="line">pipeline beat.PipelineConnector,</span><br><span class="line">configInputs *common.Config,</span><br><span class="line">configModules *common.Config,</span><br><span class="line">) <span class="type">error</span> &#123;</span><br><span class="line">log := c.log</span><br><span class="line"></span><br><span class="line">log.Infof(<span class="string">&quot;Loading Inputs: %v&quot;</span>, <span class="built_in">len</span>(c.inputConfigs))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prospect the globs/paths given on the command line and launch harvesters</span></span><br><span class="line"><span class="keyword">for</span> _, inputConfig := <span class="keyword">range</span> c.inputConfigs &#123;</span><br><span class="line">    <span class="comment">// 1、构建input对象并运行</span></span><br><span class="line">err := c.startInput(pipeline, inputConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;starting input failed: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> configInputs.Enabled() &#123;</span><br><span class="line">    <span class="comment">// 构建reloader，动态监听配置文件更新，非主流程，这里不累赘</span></span><br><span class="line">c.inputReloader = cfgfile.NewReloader(pipeline, configInputs)</span><br><span class="line"><span class="keyword">if</span> err := c.inputReloader.Check(c.inputsFactory); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;creating input reloader failed: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> configModules.Enabled() &#123;</span><br><span class="line">    <span class="comment">// 同上</span></span><br><span class="line">c.modulesReloader = cfgfile.NewReloader(pipeline, configModules)</span><br><span class="line"><span class="keyword">if</span> err := c.modulesReloader.Check(c.modulesFactory); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;creating module reloader failed: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.inputReloader != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.inputReloader.Run(c.inputsFactory)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.modulesReloader != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.modulesReloader.Run(c.modulesFactory)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Infof(<span class="string">&quot;Loading and starting Inputs completed. Enabled inputs: %v&quot;</span>, <span class="built_in">len</span>(c.inputs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个代码主要就是启动input对象，我们继续看<code>startInput</code>这个方法，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *crawler)</span></span> startInput(</span><br><span class="line">pipeline beat.PipelineConnector,</span><br><span class="line">config *common.Config,</span><br><span class="line">) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !config.Enabled() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">config.Unpack(&amp;h)</span><br><span class="line">id, err := hashstructure.Hash(h, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;can not compute id from configuration: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, ok := c.inputs[id]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;input with same ID already exists: %v&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runner, err := c.inputsFactory.Create(pipeline, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Error while initializing input: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> inputRunner, ok := runner.(*input.Runner); ok &#123;</span><br><span class="line">inputRunner.Once = c.once</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.inputs[id] = runner</span><br><span class="line"></span><br><span class="line">c.log.Infof(<span class="string">&quot;Starting input (ID: %d)&quot;</span>, id)</span><br><span class="line">runner.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意方法最后的<code>runner.Start()</code>，就是在启动<code>input</code>。这里的<code>Runner</code>是对<code>input</code>的一个封装，用于管理<code>input</code>的生命周期，而<code>Start</code>方法就是通过<code>goroutine</code>调用其的<code>Run</code>方法，而<code>Run</code>的本质就是调用对于<code>input</code>的<code>Run</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Input <span class="keyword">interface</span> &#123;</span><br><span class="line">Run()</span><br><span class="line">Stop()</span><br><span class="line">Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Runner <span class="keyword">struct</span> &#123;</span><br><span class="line">config   inputConfig</span><br><span class="line">input    Input</span><br><span class="line">done     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">wg       *sync.WaitGroup</span><br><span class="line">Once     <span class="type">bool</span></span><br><span class="line">beatDone <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start starts the input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Runner)</span></span> Start() &#123;</span><br><span class="line">p.wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">onceWg := sync.WaitGroup&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> p.Once &#123;</span><br><span class="line"><span class="comment">// Make sure start is only completed when Run did a complete first scan</span></span><br><span class="line"><span class="keyword">defer</span> onceWg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onceWg.Add(<span class="number">1</span>)</span><br><span class="line">inputList.Add(p.config.Type)</span><br><span class="line"><span class="comment">// Add waitgroup to make sure input is finished</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">onceWg.Done()</span><br><span class="line">p.stop()</span><br><span class="line">p.wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">p.Run()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run starts scanning through all the file paths and fetch the related files. Start a harvester for each file</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Runner)</span></span> Run() &#123;</span><br><span class="line"><span class="comment">// Initial input run</span></span><br><span class="line">p.input.Run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shuts down after the first complete run of all input</span></span><br><span class="line"><span class="keyword">if</span> p.Once &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-p.done:</span><br><span class="line">logp.Info(<span class="string">&quot;input ticker stopped&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(p.config.ScanFrequency):</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Run input&quot;</span>)</span><br><span class="line">p.input.Run()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们最常用的就是通过<code>filebeat</code>来采集日志，我们这里就以<code>log</code>为例，来看其的具体流程，文件为<code>filebeat/input/log/input.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run runs the input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Input)</span></span> Run() &#123;</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Start next scan&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TailFiles is like ignore_older = 1ns and only on startup</span></span><br><span class="line"><span class="keyword">if</span> p.config.TailFiles &#123;</span><br><span class="line">ignoreOlder := p.config.IgnoreOlder</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overwrite ignore_older for the first scan</span></span><br><span class="line">p.config.IgnoreOlder = <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Reset ignore_older after first run</span></span><br><span class="line">p.config.IgnoreOlder = ignoreOlder</span><br><span class="line"><span class="comment">// Disable tail_files after the first run</span></span><br><span class="line">p.config.TailFiles = <span class="literal">false</span></span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 扫码，核心方法</span></span><br><span class="line">p.scan()</span><br><span class="line"></span><br><span class="line"><span class="comment">// It is important that a first scan is run before cleanup to make sure all new states are read first</span></span><br><span class="line"><span class="keyword">if</span> p.config.CleanInactive &gt; <span class="number">0</span> || p.config.CleanRemoved &#123;</span><br><span class="line">beforeCount := p.states.Count()</span><br><span class="line">cleanedStates, pendingClean := p.states.Cleanup()</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;input states cleaned up. Before: %d, After: %d, Pending: %d&quot;</span>,</span><br><span class="line">beforeCount, beforeCount-cleanedStates, pendingClean)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Marking removed files to be cleaned up. Cleanup happens after next scan to make sure all states are updated first</span></span><br><span class="line"><span class="keyword">if</span> p.config.CleanRemoved &#123;</span><br><span class="line"><span class="keyword">for</span> _, state := <span class="keyword">range</span> p.states.GetStates() &#123;</span><br><span class="line"><span class="comment">// os.Stat will return an error in case the file does not exist</span></span><br><span class="line">stat, err := os.Stat(state.Source)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">p.removeState(state)</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Remove state for file as file removed: %s&quot;</span>, state.Source)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;input state for %s was not removed: %s&quot;</span>, state.Source, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Check if existing source on disk and state are the same. Remove if not the case.</span></span><br><span class="line">newState := file.NewState(stat, state.Source, p.config.Type, p.meta, p.fileStateIdentifier)</span><br><span class="line"><span class="keyword">if</span> state.IdentifierName != newState.IdentifierName &#123;</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;file_identity configuration for file has changed from %s to %s, generating new id&quot;</span>, state.IdentifierName, newState.IdentifierName)</span><br><span class="line">state.Id, state.IdentifierName = p.fileStateIdentifier.GenerateID(state)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !state.IsEqual(&amp;newState) &#123;</span><br><span class="line">p.removeState(state)</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Remove state of file as its identity has changed: %s&quot;</span>, state.Source)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>p.scan()</code>是其中的核心方法，跟踪进去看具体的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scan starts a scanGlob for each provided path/glob</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Input)</span></span> scan() &#123;</span><br><span class="line"><span class="keyword">var</span> sortInfos []FileSortInfo</span><br><span class="line"><span class="keyword">var</span> files []<span class="type">string</span></span><br><span class="line"></span><br><span class="line">paths := p.getFiles()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p.config.ScanSort != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">sortInfos, err = getSortedFiles(p.config.ScanOrder, p.config.ScanSort, getSortInfos(paths))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Failed to sort files during scan due to error %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sortInfos == <span class="literal">nil</span> &#123;</span><br><span class="line">files = getKeys(paths)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(paths); i++ &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> info os.FileInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sortInfos == <span class="literal">nil</span> &#123;</span><br><span class="line">path = files[i]</span><br><span class="line">info = paths[path]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">path = sortInfos[i].path</span><br><span class="line">info = sortInfos[i].info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-p.done:</span><br><span class="line">logp.Info(<span class="string">&quot;Scan aborted because input stopped.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newState, err := getFileState(path, info, p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Skipping file %s due to error %s&quot;</span>, path, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load last state</span></span><br><span class="line">isNewState := p.states.IsNew(newState)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ignores all files which fall under ignore_older</span></span><br><span class="line"><span class="keyword">if</span> p.isIgnoreOlder(newState) &#123;</span><br><span class="line">err := p.handleIgnoreOlder(isNewState, newState)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Updating ignore_older state error: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decides if previous state exists</span></span><br><span class="line"><span class="keyword">if</span> isNewState &#123;</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Start harvester for new file: %s&quot;</span>, newState.Source)</span><br><span class="line">      <span class="comment">// 发现是新文件，需构建新的harvester对象并运行</span></span><br><span class="line">err := p.startHarvester(newState, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err == errHarvesterLimit &#123;</span><br><span class="line">logp.Debug(<span class="string">&quot;input&quot;</span>, harvesterErrMsg, newState.Source, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(harvesterErrMsg, newState.Source, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lastState := p.states.FindPrevious(newState)</span><br><span class="line">p.harvestExistingFile(newState, lastState)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scan</code>方法内首先获取所有的文件。其次获取文件状态，根据状态来判定收集最新数据，还是从历史文件收集。文件收集会构建<code>Harvester</code>对象。<code>p.startHarvester(newState, 0)</code>是其核心方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// startHarvester starts a new harvester with the given offset</span><br><span class="line">// In case the HarvesterLimit is reached, an error is returned</span><br><span class="line">func (p *Input) startHarvester(state file.State, offset int64) error &#123;</span><br><span class="line">if p.numHarvesters.Inc() &gt; p.config.HarvesterLimit &amp;&amp; p.config.HarvesterLimit &gt; 0 &#123;</span><br><span class="line">p.numHarvesters.Dec()</span><br><span class="line">harvesterSkipped.Add(1)</span><br><span class="line">return errHarvesterLimit</span><br><span class="line">&#125;</span><br><span class="line">// Set state to &quot;not&quot; finished to indicate that a harvester is running</span><br><span class="line">state.Finished = false</span><br><span class="line">state.Offset = offset</span><br><span class="line"></span><br><span class="line">// Create harvester with state</span><br><span class="line">// 创建harvester </span><br><span class="line">h, err := p.createHarvester(state, func() &#123; p.numHarvesters.Dec() &#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">p.numHarvesters.Dec()</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> // 对harvester 进行配置</span><br><span class="line">err = h.Setup()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">p.numHarvesters.Dec()</span><br><span class="line">return fmt.Errorf(&quot;error setting up harvester: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Update state before staring harvester</span><br><span class="line">// This makes sure the states is set to Finished: false</span><br><span class="line">// This is synchronous state update as part of the scan</span><br><span class="line">h.SendStateUpdate()</span><br><span class="line">// 启动harvester</span><br><span class="line">if err = p.harvesters.Start(h); err != nil &#123;</span><br><span class="line">p.numHarvesters.Dec()</span><br><span class="line">&#125;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法的核心内容可以概括成三步：</p><ol><li><code>p.createHarvester</code>构建<code>harvester</code></li><li><code>p.Setup</code>配置<code>harvester</code>。<code>Setup</code>方法内会初始化文件相关的内容，以及构建文件<code>reader</code>。</li><li><code>p.harvesters.Start(h)</code>运行<code>harvester</code></li></ol><p>这里我们具体看下<code>p.harvesters.Start(h)</code>这个方法，其的作用就是继续在一个<code>go routine</code>中启动<code>harvester.run</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start starts the given harvester and add its to the registry</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Registry)</span></span> Start(h Harvester) <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Make sure stop is not called during starting a harvester</span></span><br><span class="line">r.Lock()</span><br><span class="line"><span class="keyword">defer</span> r.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure no new harvesters are started after stop was called</span></span><br><span class="line"><span class="keyword">if</span> !r.active() &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;registry already stopped&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the harvester to the registry and share the lock with stop making sure Start() and Stop()</span></span><br><span class="line"><span class="comment">// have a consistent view of the harvesters.</span></span><br><span class="line">r.harvesters[h.ID()] = h</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.remove(h)</span><br><span class="line">r.wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// Starts harvester and picks the right type. In case type is not set, set it to default (log)</span></span><br><span class="line">err := h.Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Error running input: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>h.Run</code>其实又是一个interface方法，这里我们继续以<code>log</code>为例，因此我们这里跟踪<code>filebeat/input/log/harvester.go</code>中的<code>Run</code>方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run start the harvester and reads files line by line and sends events to the defined output</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Harvester)</span></span> Run() <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Allow for some cleanup on termination</span></span><br><span class="line"><span class="keyword">if</span> h.onTerminate != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> h.onTerminate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outlet := channel.CloseOnSignal(h.outletFactory(), h.done)</span><br><span class="line">forwarder := harvester.NewForwarder(outlet)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is to make sure a harvester is not started anymore if stop was already</span></span><br><span class="line"><span class="comment">// called before the harvester was started. The waitgroup is not incremented afterwards</span></span><br><span class="line"><span class="comment">// as otherwise it could happened that between checking for the close channel and incrementing</span></span><br><span class="line"><span class="comment">// the waitgroup, the harvester could be stopped.</span></span><br><span class="line"><span class="comment">// Here stopLock is used to prevent a data race where stopWg.Add(1) below is called</span></span><br><span class="line"><span class="comment">// while stopWg.Wait() is executing in a different goroutine, which is forbidden</span></span><br><span class="line"><span class="comment">// according to sync.WaitGroup docs.</span></span><br><span class="line">h.stopLock.Lock()</span><br><span class="line">h.stopWg.Add(<span class="number">1</span>)</span><br><span class="line">h.stopLock.Unlock()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-h.done:</span><br><span class="line">h.stopWg.Done()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Channel to stop internal harvester routines</span></span><br><span class="line">h.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Makes sure file is properly closed when the harvester is stopped</span></span><br><span class="line">h.cleanup()</span><br><span class="line"></span><br><span class="line">harvesterRunning.Add(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Marks harvester stopping completed</span></span><br><span class="line">h.stopWg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">harvesterStarted.Add(<span class="number">1</span>)</span><br><span class="line">harvesterRunning.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Closes reader after timeout or when done channel is closed</span></span><br><span class="line"><span class="comment">// This routine is also responsible to properly stop the reader</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(source <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">closeTimeout := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> time.Time)</span><br><span class="line"><span class="comment">// starts close_timeout timer</span></span><br><span class="line"><span class="keyword">if</span> h.config.CloseTimeout &gt; <span class="number">0</span> &#123;</span><br><span class="line">closeTimeout = time.After(h.config.CloseTimeout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// Applies when timeout is reached</span></span><br><span class="line"><span class="keyword">case</span> &lt;-closeTimeout:</span><br><span class="line">logp.Info(<span class="string">&quot;Closing harvester because close_timeout was reached: %s&quot;</span>, source)</span><br><span class="line"><span class="comment">// Required when reader loop returns and reader finished</span></span><br><span class="line"><span class="keyword">case</span> &lt;-h.done:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h.stop()</span><br><span class="line">err := h.reader.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logp.Err(<span class="string">&quot;Failed to stop harvester for file %s: %v&quot;</span>, h.state.Source, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(h.state.Source)</span><br><span class="line"></span><br><span class="line">logp.Info(<span class="string">&quot;Harvester started for file: %s&quot;</span>, h.state.Source)</span><br><span class="line"></span><br><span class="line">h.doneWg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">h.monitorFileSize()</span><br><span class="line">h.doneWg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-h.done:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message, err := h.reader.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> ErrFileTruncate:</span><br><span class="line">logp.Info(<span class="string">&quot;File was truncated. Begin reading file from offset 0: %s&quot;</span>, h.state.Source)</span><br><span class="line">h.state.Offset = <span class="number">0</span></span><br><span class="line">filesTruncated.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> ErrRemoved:</span><br><span class="line">logp.Info(<span class="string">&quot;File was removed: %s. Closing because close_removed is enabled.&quot;</span>, h.state.Source)</span><br><span class="line"><span class="keyword">case</span> ErrRenamed:</span><br><span class="line">logp.Info(<span class="string">&quot;File was renamed: %s. Closing because close_renamed is enabled.&quot;</span>, h.state.Source)</span><br><span class="line"><span class="keyword">case</span> ErrClosed:</span><br><span class="line">logp.Info(<span class="string">&quot;Reader was closed: %s. Closing.&quot;</span>, h.state.Source)</span><br><span class="line"><span class="keyword">case</span> io.EOF:</span><br><span class="line">logp.Info(<span class="string">&quot;End of file reached: %s. Closing because close_eof is enabled.&quot;</span>, h.state.Source)</span><br><span class="line"><span class="keyword">case</span> ErrInactive:</span><br><span class="line">logp.Info(<span class="string">&quot;File is inactive: %s. Closing because close_inactive of %v reached.&quot;</span>, h.state.Source, h.config.CloseInactive)</span><br><span class="line"><span class="keyword">case</span> reader.ErrLineUnparsable:</span><br><span class="line">logp.Info(<span class="string">&quot;Skipping unparsable line in file: %v&quot;</span>, h.state.Source)</span><br><span class="line"><span class="comment">//line unparsable, go to next line</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">logp.Err(<span class="string">&quot;Read line error: %v; File: %v&quot;</span>, err, h.state.Source)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get copy of state to work on</span></span><br><span class="line"><span class="comment">// This is important in case sending is not successful so on shutdown</span></span><br><span class="line"><span class="comment">// the old offset is reported</span></span><br><span class="line">state := h.getState()</span><br><span class="line">startingOffset := state.Offset</span><br><span class="line">state.Offset += <span class="type">int64</span>(message.Bytes)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop harvester in case of an error</span></span><br><span class="line"><span class="keyword">if</span> !h.onMessage(forwarder, state, message, startingOffset) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update state of harvester as successfully sent</span></span><br><span class="line">h.state = state</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update metics of harvester as event was sent</span></span><br><span class="line">h.metrics.readOffset.Set(state.Offset)</span><br><span class="line">h.metrics.lastPublished.Set(time.Now())</span><br><span class="line">h.metrics.lastPublishedEventTimestamp.Set(message.Ts)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法主要分为这么几步：</p><ol><li>创建一个<code>forwarder</code>转发器</li><li>死循环从<code>reader</code>里的读取内容</li><li>通过<code>farwarder</code>向下转发</li></ol><p><code>h.sendEvent(data, forwarder)</code>这段代码将采集的数据发送到下游，内部其实就是用<code>forwarder</code>转发了数据。</p><p>到此整个采集的流程就基本完成了。</p><h3 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h3><p>通过以上这些流程的分析，可以看出filebeat中其实大量使用到了<code>go routine</code>协程。而这也是<code>go</code>的最大一个特性。<code>filebeat</code>其实相当于一个大的管理器，他管理者以单个<code>input</code>文件为单位的n组协程，这样的好处就是他们之间是相互没有影响的，并且由于协程比线程要来的轻量很多，并且对于cpu的上下文切换也要少很多，对于系统资源的消耗也会小很多。那为什么有时候我们又会看到<code>filebeat</code>占用了近20%的cpu利用率，这个其实就在于<code>forwarder</code>转发后的处理流程了，如果你引入了过多的计算<code>process</code>，或者你的<code>output</code>里有重cpu的计算例如压缩，那当然会消耗更多的cpu资源，因此在使用时还是要评估好你的方案对系统资源的消耗。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;说完了&lt;code&gt;filebeat&lt;/code&gt;的基础架构和相关设计后，我们就来看下&lt;code&gt;filebeat&lt;/code&gt;是如何来实现这些功能的。这里只对几个相对来说比较重要的几个流程进行讨论。其余的设计会在之后的文章中进行阐述。几个流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动过程&lt;/li&gt;
&lt;li&gt;harvester 监听过程（以log为例）&lt;/li&gt;
&lt;li&gt;outputs 处理流程（以kafka为例）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Filebeat" scheme="https://blog.jobshen.com/categories/Filebeat/"/>
    
    
    <category term="filebeat" scheme="https://blog.jobshen.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat 浅析（一）</title>
    <link href="https://blog.jobshen.com/posts/6bf64646.html"/>
    <id>https://blog.jobshen.com/posts/6bf64646.html</id>
    <published>2021-02-17T04:22:36.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a> or <a href="https://www.elastic.co/products/logstash">Logstash</a> for indexing.</p></blockquote><p>这是<code>elastic</code>对于<code>filebeat</code>的官方描述，翻译过来就是<code>filebeat</code>是一个轻量级的用来采集和转发日志数据的组件。将采集的日志封装成<code>event</code>转发给下游的组件，例如<code>elasticsearch</code>、<code>logstash</code>或者<code>kafka</code>。</p><span id="more"></span><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p><img data-src="https://pic.jobshen.com/2022/05/5548112850028340e3d33d4414949959.png" alt="artich"></p><h2 id="Inputs"><a href="#Inputs" class="headerlink" title="Inputs"></a>Inputs</h2><p>该组件的作用就如同名称一样，是用来定义输入源的，简单理解就是定义了你需要采集的数据源是哪些，对于我们最常使用的日志来说就是告诉<code>filebeat</code>需要监听哪些日志文件，当然其<code>inputs</code>类型并不是只有<code>log</code>一种，其支持以下类型：</p><ul><li>Azure Event Hub</li><li>Cloud Foundry</li><li>Container</li><li>Docker</li><li>Google Pub&#x2F;Sub</li><li>HTTP Endpoint</li><li>HTTP JSON</li><li>Kafka</li><li><strong>Log</strong></li><li>MQTT</li><li>NetFlow</li><li>Office 365 Management Activity API</li><li>Redis</li><li>S3</li><li>Stdin</li><li>Syslog</li><li>TCP</li><li>UDP</li></ul><p>当然最常有的是其中的<code>log</code>类型，使用其来采集我们的应用日志，然后可以对我们的日志信息进行实时&#x2F;离线统计、分析。</p><h2 id="Harvester"><a href="#Harvester" class="headerlink" title="Harvester"></a>Harvester</h2><p>该组件严格意义上来说也是属于<code>inputs</code>的，但是由于其重要性，这里才单独拿出来说，该组件的功能其实很简单–监听需要采集的输入源，将其监听到的所有变更向下进行转发。转发到哪呢，这就会引出下一个组件，<code>Spooler</code>。</p><h2 id="Spooler"><a href="#Spooler" class="headerlink" title="Spooler"></a>Spooler</h2><p><code>spooler</code>其实是一个集合，里面包括很多小组件：<code>porcessor</code>、<code>Internal queue</code>等。</p><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p>该组件是对<code>harvester</code>发过来的<code>event</code>进行二次处理转化为另一个类型的<code>event</code>。可以把其简单理解为一个<code>filtering</code>的过程，从中将一些不满足你的需求的<code>event</code>过滤调，只将符合条件的<code>event</code>向下传递，进入<code>internal queue</code>。</p><h3 id="Internal-Queue"><a href="#Internal-Queue" class="headerlink" title="Internal Queue"></a>Internal Queue</h3><p>该组件就是<code>filebeat</code>用来存储<code>harvester</code>转发的<code>data event</code>的内部“队列”，其默认实现是一个内存队列，如果对数据完整性要求高可以选择使用磁盘来存储相关队列信息。同时<code>internal queue</code>还会对<code>event</code>进行一次合并（<code>batch</code>）操作，目的是为了减少<code>outputs</code>组件的发送压力。</p><h2 id="Outputs"><a href="#Outputs" class="headerlink" title="Outputs"></a>Outputs</h2><p>该组件就是用来消费<code>internal queue</code>队列中的<code>event</code>的，每次其会从<code>internal queue</code>中取出一个<code>batch</code>的数据，经过编解码、压缩等一系列操作后将其存储到下游系统中。目前<code>filebeat</code>支持的<code>outputs</code>包含：</p><ul><li>Elasticsearch Service</li><li>Elasticsearch</li><li>Logstash</li><li>Kafka</li><li>Redis</li><li>File</li><li>Console</li></ul><h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><p>除了上述的几个主要组件之外，<code>filebeat</code>还包括很多其他组件，比如：<code>modules</code>、<code>monitor</code>等。这里暂不进行介绍。可以自己去看<code>Filebeat</code>的<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">官方文档</a>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>filebeat</code>的大致流程就是使用<code>inputs</code>组件中定义的<code>type</code>类型的<code>harvester</code>来监听采集相应<code>inputs</code>中产生的事件（<code>event</code>），并将其转发到<code>spooler</code>中，<code>spooler</code>在经过一系列的<code>processor</code>处理后将<code>events</code>合并为一个<code>batch</code>最终存入到<code>queue</code>中，等待<code>outputs</code>来消费，<code>outputs</code>将从<code>queue</code>中拉取到的<code>batch</code>存入对于的下游系统中。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to &lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt; or &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;Logstash&lt;/a&gt; for indexing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是&lt;code&gt;elastic&lt;/code&gt;对于&lt;code&gt;filebeat&lt;/code&gt;的官方描述，翻译过来就是&lt;code&gt;filebeat&lt;/code&gt;是一个轻量级的用来采集和转发日志数据的组件。将采集的日志封装成&lt;code&gt;event&lt;/code&gt;转发给下游的组件，例如&lt;code&gt;elasticsearch&lt;/code&gt;、&lt;code&gt;logstash&lt;/code&gt;或者&lt;code&gt;kafka&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Filebeat" scheme="https://blog.jobshen.com/categories/Filebeat/"/>
    
    
    <category term="filebeat" scheme="https://blog.jobshen.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>关于Java日志隔离功能的闲谈</title>
    <link href="https://blog.jobshen.com/posts/be21c8ca.html"/>
    <id>https://blog.jobshen.com/posts/be21c8ca.html</id>
    <published>2019-01-21T14:20:16.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​我们都知道日志至于任何系统、软件都是十分重要的组成部分，通过日志我们可以方便地了解到现在系统运行是否正常、是否有异常情况。但有时候日志太多了也会有幸福地烦恼，发生异常想通过日志进行排查，可是满屏地日志都是不那么重要地内容，像心跳日志、debug日志等等。</p><p>​这在java应用尤为严重，你每引入地一个jar都有可能引入一堆打印的日志，这样一来要从日志中找到你所需要的内容将是一件极其困难的事情。当然，你会说，java拥有这么多优秀的日志框架系统，可以简单地通过相应地配置文件将这些内容根据不同的输出级别输出到不同的目录文件，可是如果将这件事情都交给终端用户去处理，那将会是一件极其复杂的工程，他得明白哪些是他需要的、哪些是他不需要的，而这些信息应该是对应的开发人员最清楚不过的，因此让开发人员提前将这些日志进行归类，输出到指定的文件，那对应使用者来说将会变得很简单。</p><span id="more"></span><h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2><p>​首先想到的应该就是通过日志的配置文件，添加不同的<code>appender</code>和<code>logger</code>。可是这些配置文件应该是存在与用户的应用中的，作为一个被引入的module该如何去修改这份文件呢？而且用户最终采用的是哪个日志框架我同样不能左右，我该根据哪个实现呢？</p><p>​第一个问题，很好解决，现在大部分的日志框架都提供了基于java 代码的方式来添加<code>appender</code>和<code>logger</code>的配置，因此我们只需要在应用启动时，获取<code>LoggerContext</code>对象，然后添加自定义的<code>appender</code>和<code>logger</code>即可，例如阿里的TDDL中就有相关的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slf4j只是一个代理工程，需要判断一下具体的实现类</span></span><br><span class="line"><span class="keyword">if</span> (checkLogger(logger, LOGBACK)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (canUseEncoder) &#123;</span><br><span class="line">        dynamic = <span class="keyword">new</span> <span class="title class_">DynamicLogbackLogger</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dynamic = <span class="keyword">new</span> <span class="title class_">DynamicLogback918Logger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkLogger(logger, LOG4J_Adapter)) &#123;</span><br><span class="line">    dynamic = <span class="keyword">new</span> <span class="title class_">DynamicLog4jAdapterLogger</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkLogger(logger, LOG4J)) &#123;</span><br><span class="line">    dynamic = <span class="keyword">new</span> <span class="title class_">DynamicLog4jLogger</span>();</span><br><span class="line">&#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.warn(<span class="string">&quot;logger is not a log4j/logback instance, dynamic logger is disabled&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断具体地实现框架是哪个，然后再获得对应实现框架的<code>loggerContext</code>，例如<code>logback</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (loggerContext == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">ILoggerFactory</span> <span class="variable">lcObject</span> <span class="operator">=</span> LoggerFactory.getILoggerFactory();</span><br><span class="line">    <span class="keyword">if</span> (!(lcObject <span class="keyword">instanceof</span> LoggerContext)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LogbackException</span>(<span class="string">&quot;Expected LOGBACK binding with SLF4J, but another log system has taken the place: &quot;</span> + lcObject.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">    loggerContext = (LoggerContext) lcObject;</span><br><span class="line">    <span class="keyword">if</span> (props != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : props.entrySet()) &#123;</span><br><span class="line">            loggerContext.putProperty(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着再添加自身所需的<code>appender</code>和<code>logger</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Appender <span class="title function_">buildAppender</span><span class="params">(String name, String fileName, String pattern)</span> &#123;</span><br><span class="line"><span class="type">RollingFileAppender</span> <span class="variable">appender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RollingFileAppender</span>();</span><br><span class="line">appender.setContext(loggerContext);</span><br><span class="line">appender.setName(name);</span><br><span class="line">appender.setAppend(<span class="literal">true</span>);</span><br><span class="line">appender.setFile(<span class="keyword">new</span> <span class="title class_">File</span>(getLogPath(), fileName).getAbsolutePath());</span><br><span class="line"></span><br><span class="line"><span class="type">TimeBasedRollingPolicy</span> <span class="variable">rolling</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimeBasedRollingPolicy</span>();</span><br><span class="line">rolling.setContext(loggerContext);</span><br><span class="line">rolling.setParent(appender);</span><br><span class="line">rolling.setFileNamePattern(<span class="keyword">new</span> <span class="title class_">File</span>(getLogPath(), fileName).getAbsolutePath() + <span class="string">&quot;.%d&#123;yyyy-MM-dd&#125;&quot;</span>);</span><br><span class="line">rolling.start();</span><br><span class="line">appender.setRollingPolicy(rolling);</span><br><span class="line"></span><br><span class="line"><span class="type">PatternLayoutEncoder</span> <span class="variable">layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternLayoutEncoder</span>();</span><br><span class="line">layout.setContext(loggerContext);</span><br><span class="line">layout.setPattern(pattern);</span><br><span class="line">layout.setCharset(Charset.forName(getEncoding()));</span><br><span class="line">layout.start();</span><br><span class="line">appender.setEncoder(layout);</span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">appender.start();</span><br><span class="line"><span class="keyword">return</span> appender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是这样做，存在的问题也是很明显的：</p><ul><li>需自己判断应用采用的实现框架，但可以通过抽取的方式构建一个公共jar，例如common包</li><li>该实现框架需要能够支持通过动态的形式添加<code>appender</code></li><li>仍然与应用的<code>Log</code>耦合在一起</li></ul><p>那除此之外，还有其他的方式能够实现同样的功能吗？答案当时是<em><strong>有</strong></em>。</p><h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><p>默认情况下一个应用启动后，只会存在一个<code>loggerContext</code>，因为日志框架都是单例模式的，也是为了减少开销。那如果我们有多个<code>loggerContext</code>呢，是不是可以每个需要的<code>modeule</code>都拥有一份单独的<code>loggerContext</code>，那不就可以通过加载配置文件的形式更轻量级地来实现需要动态添加<code>appender</code>的功能呢。</p><p>大致的实现逻辑应该是这样：</p><ul><li>需要一个<code>map</code>来管理所有的这些<code>loggerContext</code>，以每个<code>module</code>的<code>groupId</code>+<code>artifactId</code>（现在90%以上的工程都提供maven坐标）为唯一标识 – <code>key</code></li><li>每个module自身需要有一份配置文件，当然由于日志实现很多你可能需要多份文件，同样你可以定义自己的格式，然后通过java code的形式去转化为最终的各个不同实现</li><li>需要能通过唯一的Id，例如<code>groupId</code>+<code>artifactId</code>定位到你的配置文件</li></ul><p>这样大致的一个可以做到日志隔离的简单框架就搭建起来了，使用配置文件还有一个好处就是，一些日志框架可以动态刷新配置文件，这就使得你可以在运行时动态改变日志参数，例如日志级别。</p><p>获取一个单独的logger对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleLoggerManager.getLoggerByCoordinate(name, <span class="string">&quot;coordinate&quot;</span>);</span><br></pre></td></tr></table></figure><p>维护<code>logger</code>相关对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ConcurrentHashMap&lt;ModuleLogId, ModuleLogInfo&gt; MODULE_LOGGER_MAP =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleLogId</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一些可修改的日志配置信息，可通过$&#123;key&#125;的形式传递</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; tags = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String              coordinate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ModuleLogId <span class="title function_">addTag</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        tags.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleLogInfo</span> &#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="comment">// 根据具体实现会创建不同的loggerFactory对象，然后不同的logFactory对象会创建不同的loggerContext对象</span></span><br><span class="line">    <span class="keyword">private</span> AbstractLoggerModuleFactory abstractLoggerModuleFactory;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建factory过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLoggerModuleFactory <span class="title function_">createILoggerFactory</span><span class="params">(ModuleLogId moduleLogId, ClassLoader moduleClassLoader)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (System.getProperty(Constants.Module_LOGGER_DISABLE_PROP_KEY) != <span class="literal">null</span></span><br><span class="line">&amp;&amp; Boolean.TRUE.toString().equalsIgnoreCase(</span><br><span class="line">System.getProperty(Constants.Module_LOGGER_DISABLE_PROP_KEY))) &#123;</span><br><span class="line">Constants.DEFAULT_LOGGER.warn(<span class="string">&quot;Module Logger is disabled!  -D&#123;&#125;=true&quot;</span>, Constants.Module_LOGGER_DISABLE_PROP_KEY);</span><br><span class="line"><span class="keyword">return</span> JVM_LOGGER_FACTORY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// set log props</span></span><br><span class="line">LogTypeJudgeUtil.processGlobalSystemLogProperties();</span><br><span class="line"></span><br><span class="line"><span class="comment">// do create</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// first log4j2</span></span><br><span class="line"><span class="keyword">if</span> (LogTypeJudgeUtil.isLog4j2Usable(moduleClassLoader)) &#123;</span><br><span class="line">            ...</span><br><span class="line"><span class="keyword">return</span> log4j2LoggerFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//second logback</span></span><br><span class="line"><span class="keyword">if</span> (LogTypeJudgeUtil.isLogbackUsable(moduleClassLoader)) &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">return</span> logbackLoggerFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// third log4j</span></span><br><span class="line"><span class="keyword">if</span> (LogTypeJudgeUtil.isLog4jUsable(moduleClassLoader)) &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">return</span> log4jLoggerFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Constants.DEFAULT_LOGGER.warn(<span class="string">&quot;No log util is usable, Default app logger will be used.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">Constants.DEFAULT_LOGGER.error(<span class="string">&quot;Build ILoggerFactory error! Default app logger will be used.&quot;</span>,</span><br><span class="line">e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JVM_LOGGER_FACTORY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以log4j2为例，获取loggerFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * confFileUrl 为根据传入的coordinate以及具体的日志实现框架，拼接出路径</span></span><br><span class="line"><span class="comment"> * 例如 coordinate 为 org.jobshen.mq.rocketmq</span></span><br><span class="line"><span class="comment"> * 则 log4j2的文件路径为：classpath*:org/jobshen/mq/rocketmq/log/log4j2/log-conf.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> AbstractLoggerModuleFactory <span class="title function_">doBuild</span><span class="params">(<span class="keyword">final</span> String coordinate, <span class="keyword">final</span> ClassLoader moduleClassLoader, <span class="keyword">final</span> URL confFileUrl)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//构建单独的loggerContext对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">LoggerContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggerContext</span>(coordinate, <span class="literal">null</span>, confFileUrl.toURI());</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ConfigurationFactory</span> <span class="variable">configurationFactory</span> <span class="operator">=</span> ConfigurationFactory.getInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class[] parameterTypes = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">3</span>];</span><br><span class="line">parameterTypes[<span class="number">0</span>] = String.class;</span><br><span class="line">parameterTypes[<span class="number">1</span>] = URI.class;</span><br><span class="line">parameterTypes[<span class="number">2</span>] = ClassLoader.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">getConfigurationMethod</span> <span class="operator">=</span> configurationFactory.getClass().getMethod(</span><br><span class="line"><span class="string">&quot;getConfiguration&quot;</span>, parameterTypes);</span><br><span class="line">config = (Configuration) getConfigurationMethod.invoke(configurationFactory,</span><br><span class="line">coordinate, confFileUrl.toURI(), moduleClassLoader);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">Class[] parameterTypes = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">4</span>];</span><br><span class="line">parameterTypes[<span class="number">0</span>] = LoggerContext.class;</span><br><span class="line">parameterTypes[<span class="number">1</span>] = String.class;</span><br><span class="line">parameterTypes[<span class="number">2</span>] = URI.class;</span><br><span class="line">parameterTypes[<span class="number">3</span>] = ClassLoader.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">getConfigurationMethod</span> <span class="operator">=</span> configurationFactory.getClass().getMethod(</span><br><span class="line"><span class="string">&quot;getConfiguration&quot;</span>, parameterTypes);</span><br><span class="line">config = (Configuration) getConfigurationMethod.invoke(configurationFactory,</span><br><span class="line">context, coordinate, confFileUrl.toURI(), moduleClassLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (config == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No log4j2 configuration are found.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : getProperties().entrySet()) &#123;</span><br><span class="line"><span class="comment">//from Map&lt;String,String&gt;</span></span><br><span class="line">config.getProperties().put((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : System.getProperties().entrySet()) &#123;</span><br><span class="line"><span class="comment">//from Map&lt;String,String&gt;</span></span><br><span class="line">config.getProperties().put((String) entry.getKey(), (String) entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">context.start(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractLoggerModuleFactory</span>(getLoggingType()) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConcurrentMap&lt;String, org.apache.logging.slf4j.Log4jLogger&gt; loggerMap =</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Logger <span class="title function_">setLevel</span><span class="params">(String loggerName, ModuleLogLevel logLevel)</span> &#123;</span><br><span class="line">org.apache.logging.slf4j.<span class="type">Log4jLogger</span> <span class="variable">log4jLoggerAdapter</span> <span class="operator">=</span> (org.apache.logging.slf4j.Log4jLogger) <span class="built_in">this</span></span><br><span class="line">.getLogger(loggerName);</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> Logger.ROOT_LOGGER_NAME.equals(loggerName) ? LogManager.ROOT_LOGGER_NAME</span><br><span class="line">: loggerName;</span><br><span class="line">org.apache.logging.log4j.core.<span class="type">Logger</span> <span class="variable">log4j2Logger</span> <span class="operator">=</span> context.getLogger(key);</span><br><span class="line"><span class="comment">//level</span></span><br><span class="line">org.apache.logging.log4j.<span class="type">Level</span> <span class="variable">log4j2Level</span> <span class="operator">=</span> <span class="built_in">this</span>.toLog4j2Level(logLevel);</span><br><span class="line">log4j2Logger.setLevel(log4j2Level);</span><br><span class="line"><span class="keyword">return</span> log4jLoggerAdapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//使用门面框架 slf4j 返回logger对象</span></span><br><span class="line"><span class="keyword">public</span> org.slf4j.Logger <span class="title function_">getLogger</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> Logger.ROOT_LOGGER_NAME.equals(name) ? LogManager.ROOT_LOGGER_NAME</span><br><span class="line">: name;</span><br><span class="line">org.apache.logging.log4j.core.<span class="type">Logger</span> <span class="variable">log4jLogger</span> <span class="operator">=</span> context.getLogger(key);</span><br><span class="line"><span class="type">Log4jLogger</span> <span class="variable">oldInst</span> <span class="operator">=</span> <span class="built_in">this</span>.loggerMap.get(key);</span><br><span class="line"><span class="keyword">if</span> (oldInst != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> oldInst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Log4jLogger</span> <span class="variable">newInst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Log4jLogger</span>(log4jLogger, key);</span><br><span class="line">oldInst = <span class="built_in">this</span>.loggerMap.putIfAbsent(key, newInst);</span><br><span class="line"><span class="type">return</span> <span class="variable">oldInst</span> <span class="operator">=</span>= <span class="literal">null</span> ? newInst : oldInst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> org.apache.logging.log4j.Level <span class="title function_">toLog4j2Level</span><span class="params">(ModuleLogLevel logLevel)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logLevel == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line"><span class="string">&quot;ModuleLogLevel is NULL when adapter to log4j2.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (logLevel) &#123;</span><br><span class="line"><span class="keyword">case</span> TRACE:</span><br><span class="line"><span class="keyword">return</span> Level.TRACE;</span><br><span class="line"><span class="keyword">case</span> DEBUG:</span><br><span class="line"><span class="keyword">return</span> Level.DEBUG;</span><br><span class="line"><span class="keyword">case</span> INFO:</span><br><span class="line"><span class="keyword">return</span> Level.INFO;</span><br><span class="line"><span class="keyword">case</span> WARN:</span><br><span class="line"><span class="keyword">return</span> Level.WARN;</span><br><span class="line"><span class="keyword">case</span> ERROR:</span><br><span class="line"><span class="keyword">return</span> Level.ERROR;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(logLevel</span><br><span class="line">+ <span class="string">&quot; is unknown when adapter to log4j2.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Log4j2 loggerModuleFactory build error!&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个方案也有其缺陷，loggerContext对象增加了对应的内存消耗也就增加了。简单统计了下，每增加一个采用日志隔离框架的模块，内存使用增加<code>5~10kb</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​	我们都知道日志至于任何系统、软件都是十分重要的组成部分，通过日志我们可以方便地了解到现在系统运行是否正常、是否有异常情况。但有时候日志太多了也会有幸福地烦恼，发生异常想通过日志进行排查，可是满屏地日志都是不那么重要地内容，像心跳日志、debug日志等等。&lt;/p&gt;
&lt;p&gt;​	这在java应用尤为严重，你每引入地一个jar都有可能引入一堆打印的日志，这样一来要从日志中找到你所需要的内容将是一件极其困难的事情。当然，你会说，java拥有这么多优秀的日志框架系统，可以简单地通过相应地配置文件将这些内容根据不同的输出级别输出到不同的目录文件，可是如果将这件事情都交给终端用户去处理，那将会是一件极其复杂的工程，他得明白哪些是他需要的、哪些是他不需要的，而这些信息应该是对应的开发人员最清楚不过的，因此让开发人员提前将这些日志进行归类，输出到指定的文件，那对应使用者来说将会变得很简单。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.jobshen.com/categories/Java/"/>
    
    
    <category term="log" scheme="https://blog.jobshen.com/tags/log/"/>
    
    <category term="隔离" scheme="https://blog.jobshen.com/tags/%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于k8s下使用Ingress保持长连接的异常情况排查</title>
    <link href="https://blog.jobshen.com/posts/eee2bd13.html"/>
    <id>https://blog.jobshen.com/posts/eee2bd13.html</id>
    <published>2019-01-02T14:19:02.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在我们中应用有一个使用到`Http Long Poll`的场景，它需要一个http请求保持最长30秒，用于即使获取到最新的数据。在k8s环境下，发现应该存在偶发的异常，表现为长连接没有正常关闭，抛出异常：</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.SocketException: Unexpected end of file from server</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><h3 id="应用异常排查"><a href="#应用异常排查" class="headerlink" title="应用异常排查"></a>应用异常排查</h3><p>首先我们先对应用程序的代码进行了排查，并没有发现代码上的bug，可以排除是由于代码bug导致的这个问题。</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>接下来考虑的方式就是抓包，分别在三个节点上进行抓包：应用程序所在pod、ingress-nginx所在pod、服务端pod。</p><p>分别执行以下shell脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp -s 0  -w ./target.cap</span><br></pre></td></tr></table></figure><p>抓取当前网卡下的所有tcp流量，然后使用wireshark进行分析。发现了一个比较奇怪的现象：</p><p><img data-src="https://pic.jobshen.com/2022/05/18cc9d3566f6d2a9026e86fe92d74f3c.png" alt="client-tcpdump.png"></p><p><img data-src="https://pic.jobshen.com/2022/05/68a3bd4dcd02658b495c96420b9aaaf5.png" alt="nginx-tcpdump.png"></p><p><img data-src="https://pic.jobshen.com/2022/05/7ff4d8ef01b0473e7a0ca8abb9b3586d.png" alt="server-tcpdump.png"></p><p>从上到下三张图片分别是应用程序端、nginx端、服务端的抓包数据，可以发现连接的关闭是由nginx这个节点发起的，应用端和服务端同时收到了来自nginx的<code>FIN ACK</code>包，要求关闭当前连接，并且都开始执行四次握手过程。但是在这个过程中又发生了什么异常导致这个过程并没有正常完成。</p><p>通过观察大量的抓包数据后发现这个情况发生的非常多，但并不是每次都会导致连接的异常关闭，大部分还是能够正常关闭连接并建立新的连接的。</p><p>通过仔细观察发现被异常关闭的连接，都是发生在<code>Seq=1</code>的情况下，这个原因还不是很清楚。</p><p>那为什么<strong>nginx</strong>会主动发起关闭连接呢？</p><h3 id="Nginx-排查"><a href="#Nginx-排查" class="headerlink" title="Nginx 排查"></a>Nginx 排查</h3><p>这时候首先想到的就是nginx的日志，在翻查了nginx的<code>access.log</code>后，发现在相同的时间端，nginx都发生了<code>reload</code>现象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">backend reload required</span><br><span class="line">ingress backend successfully reloaded</span><br></pre></td></tr></table></figure><p>难道是由于nginx的reload导致的问题吗？</p><p>通过查询发现，nginx reload的大致流程为：</p><ul><li>reload命令触发nginx生成新的worker进程用于接受新的连接请求</li><li><code>old worker</code> 进程不再接受请求</li><li>对于仍然存在于<code>old worker</code>进程上的<code>keep alive</code>的连接，主动发送<code>FIN ACK</code> 包，通知对方关闭当前连接</li><li>当所有old worker 上的连接都关闭或者超过<code>worker-shutdown-timeout</code>所设定的时间后，会关闭old worker 进程</li></ul><p>通过查询k8s上ingress的默认配置发现，<code> worker-shutdown-timeout</code>被设置为了10s，这时候基本可以确定问题了，由于<code>old worker</code>关闭的窗口时间只有10s，如果在这个时间段内有连接还没有完成关闭，而此时<code>old worker</code>已经被关闭了，client端当然不能正常处理请求，因为它所连接的server端已经被提前关闭了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>找到问题原因了当然接下来就是解决了，将<code> worker-shutdown-timeout</code>该字段的值增大为：3600s，即1小时，理论上这个时间足够该worker上的连接全部完成关闭了。</p><p>在调整了k8s上ingress的这个参数后，又进行了反复测试，并没有再次发现同样的问题，该问题得到解决。</p><h2 id="遗留"><a href="#遗留" class="headerlink" title="遗留"></a>遗留</h2><p>然后，为什么是<code>Seq=1</code>的连接会发生这个异常，还是没有完全想明白。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在我们中应用有一个使用到`Http Long Poll`的场景，它需要一个http请求保持最长30秒，用于即使获取到最新的数据。在k8s环境下，发现应该存在偶发的异常，表现为长连接没有正常关闭，抛出异常：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.net.SocketException: Unexpected end of file from server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://blog.jobshen.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://blog.jobshen.com/tags/k8s/"/>
    
    <category term="ingress" scheme="https://blog.jobshen.com/tags/ingress/"/>
    
    <category term="nginx" scheme="https://blog.jobshen.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Centos-7下常见中间件环境的安装（三）</title>
    <link href="https://blog.jobshen.com/posts/3335490502.html"/>
    <id>https://blog.jobshen.com/posts/3335490502.html</id>
    <published>2017-12-17T12:29:46.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<p>接着上篇文章，现在开始部署Redis集群，采用方案为四主四从，暂时不考虑搭建哨兵，因此需要八台机器，以下是部署过程中的一些记录。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">CPU、RAM</th></tr></thead><tbody><tr><td align="center">10.100.1.31</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.32</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.33</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.34</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.35</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.36</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.37</td><td align="center">16 vcpu、64G ram</td></tr><tr><td align="center">10.100.1.38</td><td align="center">16 vcpu、64G ram</td></tr></tbody></table><p><em>Redis 为内存数据库，因此机器内存必须较大，根据经验，Redis占用内存一般不能超过机器内存的一半，不否则Redis的性能就会开始下降</em></p><h3 id="Redis编译"><a href="#Redis编译" class="headerlink" title="Redis编译"></a>Redis编译</h3><p>由于Redis并不能通过包管理工具（例如 <em>yum</em>、<em>apt-get</em>等）进行快速安装，只能下载源码进行编译安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ curl -O http://download.redis.io/releases/redis-4.0.6.tar.gz</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ tar -zxf redis-4.0.6.tar.gz</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ ln -s redis-4.0.6 redis</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ cd redis</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="Redis-Cluster-部署"><a href="#Redis-Cluster-部署" class="headerlink" title="Redis Cluster 部署"></a>Redis Cluster 部署</h2><h3 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h3><p>新建<em><strong>cluster</strong></em>文件夹，以及新建<em><strong>redis.conf</strong></em>文件并添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/redis$ mkdir cluster</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ vim cluster/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bind 10.100.1.31 127.0.0.1</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">supervised systemd</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile &quot;/usr/local/redis/cluster/redis.log&quot;</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">slave-priority 100</span><br><span class="line">maxmemory 34359738368</span><br><span class="line">appendonly yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="Redis-service"><a href="#Redis-service" class="headerlink" title="Redis.service"></a>Redis.service</h3><p>创建<em>systemd</em>服务，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/redis$ vim /lib/systemd/system/redis.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/redis/src/redis-server /usr/local/redis/cluster/redis.conf --daemonize no</span><br><span class="line">ExecStop=/usr/local/redis/src/redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/redis$ systemctl start redis</span><br></pre></td></tr></table></figure><h3 id="创建Redis集群"><a href="#创建Redis集群" class="headerlink" title="创建Redis集群"></a>创建Redis集群</h3><p>以下命令可以只在一台机器上执行，但为了后期维护Redis集群方便，可以在所有redis机器上都安装集群管理工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/redis$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ rvm install 2.4.3</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ rvm use 2.4.3 --default --create</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ gem install redis</span><br><span class="line">jobshen@JobShen-PC:/usr/local/redis$ ./src/redis-trib.rb create --replicas 1 10.100.1.31:6379 10.100.1.32:6379 10.100.1.33:6379 10.100.1.34:6379 10.100.1.35:6379 10.100.1.36:6379 10.100.1.37:6379 10.100.1.38:6379</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>登入任意一台redis，查看集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/redis$ ./src/redis-cli -c -p 6369</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">31f29a40699e44ae9b0dce5c8ded53cc92546c7f 10.100.1.31:6379@16379 master - 0 1513599855000 2 connected 4096-8191</span><br><span class="line">bd148fc244c821f0ebc502e2ef80e90e3ce8020f 10.100.1.32:6379@16379 master - 0 1513599857582 4 connected 12288-16383</span><br><span class="line">24c0c11cceb08a0a2c0f76773a1c3ecb5553fdd1 10.100.1.33:6379@16379 slave bd148fc244c821f0ebc502e2ef80e90e3ce8020f 0 1513599857000 8 connected</span><br><span class="line">b8ed99aef612d728f69015b20dae32751af5a668 10.100.1.34:6379@16379 myself,master - 0 1513599854000 1 connected 0-4095</span><br><span class="line">ee420f56a64c89c519c82adf2131724456656711 10.100.1.35:6379@16379 slave b8ed99aef612d728f69015b20dae32751af5a668 0 1513599856000 5 connected</span><br><span class="line">fa8f3b33ed93a8bb76c3f44b410436f12ca45d8c 10.100.1.36:6379@16379 slave 914483a3760cc5f7fc4422ea3326f39b0fc505b4 0 1513599854000 7 connected</span><br><span class="line">914483a3760cc5f7fc4422ea3326f39b0fc505b4 10.100.1.37:6379@16379 master - 0 1513599854000 3 connected 8192-12287</span><br><span class="line">da57f16f2f5b86cae95478157723c9b2972d460d 10.100.1.38:6379@16379 slave 31f29a40699e44ae9b0dce5c8ded53cc92546c7f 0 1513599854000 6 connected</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>到现在为止，整个<em>Redis集群</em>的搭建就完成了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接着上篇文章，现在开始部署Redis集群，采用方案为四主四从，暂时不考虑搭建哨兵，因此需要八台机器，以下是部署过程中的一些记录。&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="https://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="Redis" scheme="https://blog.jobshen.com/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="https://blog.jobshen.com/tags/Redis-Cluster/"/>
    
  </entry>
  
  <entry>
    <title>Centos-7下常见中间件环境的安装（二）</title>
    <link href="https://blog.jobshen.com/posts/2345740436.html"/>
    <id>https://blog.jobshen.com/posts/2345740436.html</id>
    <published>2017-12-09T12:53:12.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<p>接着上篇文章，现在开始部署RocketMQ集群，采用的部署方案是阿里推荐的两主两从异步刷盘的模式，因此准备了四台服务器来进行MQ集群的部署，以下是部署过程中的一些记录，</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">CPU、RAM</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">10.100.1.21</td><td align="center">16 vcpu、64G ram</td><td align="center">broker-a master</td></tr><tr><td align="center">10.100.1.22</td><td align="center">16 vcpu、64G ram</td><td align="center">broker-b master</td></tr><tr><td align="center">10.100.1.23</td><td align="center">16 vcpu、64G ram</td><td align="center">nameserver、broker-a slave</td></tr><tr><td align="center">10.100.1.24</td><td align="center">16 vcpu、64G ram</td><td align="center">nameserver、broker-b-slave</td></tr></tbody></table><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>这次采用的是最新版本4.2.-0-SNAPSHOT，所以jdk需要采用 <em>jdk8</em> ，按照上一篇文章将jdk全部安装好。</p><h3 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h3><p>Apache现在并没有提供RocketMQ编译好的版本，所以只能自己下载源码进行编译，由于rocketmq是通过<strong>maven</strong>进行包管理的，所以要先安装maven。</p><ul><li>下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ curl -O http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ tar -zxf apache-maven-3.5.2-bin.tar.gz</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ vim apache-maven-3.5.2/conf/settings.xml</span><br></pre></td></tr></table></figure><ul><li>修改mirror 镜像源，改为阿里云的镜像：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:*,!spring-milestones<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ vim /etc/profile</span><br><span class="line">// 在末尾添加以下内容</span><br><span class="line">export M2_HOME=/usr/local/apache-maven-3.5.2/bin</span><br><span class="line">export PATH=$M2_HOME/bin:$PATH</span><br><span class="line">// 保存 使其生效</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="RocketMQ-编译"><a href="#RocketMQ-编译" class="headerlink" title="RocketMQ 编译"></a>RocketMQ 编译</h3><ul><li>克隆代码编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ git clone -b develop https://github.com/apache/rocketmq.git</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ cd rocketmq</span><br><span class="line">jobshen@JobShen-PC:/usr/local/rocketmq$ mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">jobshen@JobShen-PC:/usr/local/rocketmq$ cd distribution/target</span><br><span class="line">jobshen@JobShen-PC:/usr/local/rocketmq$ cp apache-rocketmq.tar.gz /usr/local/apache-rocketmq.tar.gz</span><br><span class="line">jobshen@JobShen-PC:/usr/local/rocketmq$ cd /usr/local</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ tar -zxf apache-rocketmq.tar.gz</span><br></pre></td></tr></table></figure><ul><li>将压缩包拷贝到集群中所有机器，并解压</li></ul><h2 id="RocketMQ-部署"><a href="#RocketMQ-部署" class="headerlink" title="RocketMQ 部署"></a>RocketMQ 部署</h2><h3 id="修改目录配置信息"><a href="#修改目录配置信息" class="headerlink" title="修改目录配置信息"></a>修改目录配置信息</h3><ul><li>log 日志根目录 store 存储根目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ mkdir -p rocketmq_data/logs rocketmq_data/store</span><br></pre></td></tr></table></figure><ul><li>修改日志配置文件中路径</li></ul><p>将<code>logback_broker.xml </code> 、<code>logback_filtersrv.xml</code> 、<code>logback_broker.xml</code>、<code>logback_namesrv.xml</code>、<code>logback_tools.xml</code>中的<code>$&#123;user.home&#125;</code> 修改为 <code>/usr/local/rocketmq_data</code></p><h3 id="部署NameServer"><a href="#部署NameServer" class="headerlink" title="部署NameServer"></a>部署NameServer</h3><ul><li>在<code>10.100.1.23</code>、<code>10.100.1.24</code>两台机器上添加 <em><strong>nameserver</strong></em> 配置文件：<code>nameserver.properties</code>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ mkdir apache-rocketmq/conf/product</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ vim apache-rocketmq/conf/product/nameserver.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmqHome</span>=<span class="string">/usr/local/apache-rocketmq</span></span><br><span class="line"><span class="attr">kvConfigPath</span>=<span class="string">/usr/local/rocketmq_data/store/namesrv/kvConfig.json</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">9876</span></span><br><span class="line"><span class="attr">serverWorkerThreads</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">serverCallbackExecutorThreads</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">serverSelectorThreads</span>=<span class="string">6</span></span><br><span class="line"><span class="attr">serverOnewaySemaphoreValue</span>=<span class="string">512</span></span><br><span class="line"><span class="attr">serverAsyncSemaphoreValue</span>=<span class="string">128</span></span><br><span class="line"><span class="attr">serverChannelMaxIdleTimeSeconds</span>=<span class="string">240</span></span><br><span class="line"><span class="attr">serverSocketSndBufSize</span>=<span class="string">4096</span></span><br><span class="line"><span class="attr">serverSocketRcvBufSize</span>=<span class="string">2048</span></span><br><span class="line"><span class="attr">serverPooledByteBufAllocatorEnable</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>jvm</code>启动参数：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ vim bin/runserver.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this work <span class="keyword">for</span> additional information regarding copyright ownership.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(the <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">limitations under the License.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java Environment Setting</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">error_exit ()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;ERROR: $1 !!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JAVA=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class="line">export BASE_DIR=$(dirname $0)/..</span><br><span class="line">export CLASSPATH=.:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JVM Configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms16g -Xmx16g -Xmn4g -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=1024m -XX:+AlwaysPreTouch -XX:-UseBiasedLocking&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=50m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m -verbose:gc -Xloggc:/dev/shm/rmq_srv_gc.log -XX:+PrintGCDetails&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125;  -XX:-UseLargePages&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;JAVA_HOME&#125;/jre/lib/ext:$&#123;BASE_DIR&#125;/lib&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">JAVA <span class="variable">$&#123;JAVA_OPT&#125;</span> <span class="variable">$@</span></span></span><br></pre></td></tr></table></figure><ul><li>制作<code>systemd</code>脚本：namesrv.service</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ vim /lib/systemd/system/namesrv.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=RocketMQ-Nameserver</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/apache-rocketmq/bin/mqnamesrv -c /usr/local/apache-rocketmq/conf/product/namesrv.properties</span><br><span class="line">ExecStop=/usr/local/apache-rocketmq/bin/mqshutdown namesrv</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ ln -s /etc/systemd/system/namesrv.service /lib/systemd/system/namesrv.service</span><br><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>启动<em><strong>nameserver</strong></em></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ systemctl start namesrv</span><br></pre></td></tr></table></figure><h3 id="部署Broker"><a href="#部署Broker" class="headerlink" title="部署Broker"></a>部署Broker</h3><h4 id="部署broker-a"><a href="#部署broker-a" class="headerlink" title="部署broker-a"></a>部署broker-a</h4><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><ul><li>在<code>10.100.1.21</code>上新建<code>broker-a-master.properties</code>文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ mkdir apache-rocketmq/conf/product</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ vim apache-rocketmq/conf/product/broker-a-master.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmqHome</span>=<span class="string">/usr/local/apache-rocketmq</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">10.100.1.23:9876;10.100.1.24:9876</span></span><br><span class="line"><span class="attr">brokerIP1</span>=<span class="string">10.100.1.21</span></span><br><span class="line"><span class="attr">brokerIP2</span>=<span class="string">10.100.1.21</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">mq_a</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ProductCluster</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">clusterTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">brokerTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq_data/store</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq_data/store/commitlog/</span></span><br><span class="line"><span class="attr">storePathConsumerQueue</span>=<span class="string">/usr/local/rocketmq_data/store/consumequeue/</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">6000000</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">75</span></span><br><span class="line"><span class="attr">fileReserverdTime</span>=<span class="string">72</span></span><br><span class="line"><span class="attr">haListenPort</span>=<span class="string">10912</span></span><br><span class="line"><span class="attr">haSendHeartbeatInterval</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">haHousekeepingInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="attr">haTransferBatchSize</span>=<span class="string">32768</span></span><br><span class="line"><span class="attr">haMasterAddress</span>=<span class="string"></span></span><br><span class="line"><span class="attr">haSlaveFallbehindMax</span>=<span class="string">268435456</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">syncFlushTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">messageDelayLevel</span>=<span class="string">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br><span class="line"><span class="attr">flushDelayOffsetInterval</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">cleanFileForciblyEnable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>jvm</code>启动参数：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ vim bin/runbroker.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this work <span class="keyword">for</span> additional information regarding copyright ownership.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(the <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">limitations under the License.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java Environment Setting</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">error_exit ()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;ERROR: $1 !!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JAVA=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class="line">export BASE_DIR=$(dirname $0)/..</span><br><span class="line">export CLASSPATH=.:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JVM Configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms48g -Xmx48g -Xmn24g&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=64m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:/dev/shm/mq_gc_%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=20g&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;JAVA_HOME&#125;/jre/lib/ext:$&#123;BASE_DIR&#125;/lib&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;</span><br><span class="line"></span><br><span class="line">numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">if [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; then</span><br><span class="line">numactl --interleave=all $JAVA $&#123;JAVA_OPT&#125; $@</span><br><span class="line">else</span><br><span class="line">numactl --cpunodebind=$RMQ_NUMA_NODE --membind=$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">JAVA <span class="variable">$&#123;JAVA_OPT&#125;</span> <span class="variable">$@</span></span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>制作<code>systemd</code>脚本：broker.service</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ vim /lib/systemd/system/broker.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=RocketMQ-Broker</span><br><span class="line">After=namesrv.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/apache-rocketmq/bin/mqbroker -c /usr/local/apache-rocketmq/conf/product/broker-a-master.properties</span><br><span class="line">ExecStop=/usr/local/apache-rocketmq/bin/mqshutdown broker</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ ln -s /etc/systemd/system/broker.service /lib/systemd/system/broker.service</span><br><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>启动<em><strong>broker</strong></em></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ systemctl start broker</span><br></pre></td></tr></table></figure><h5 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h5><ul><li>在<code>10.100.1.23</code>上新建<code>broker-a-slave.properties</code>文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local$ mkdir apache-rocketmq/conf/product</span><br><span class="line">jobshen@JobShen-PC:/usr/local$ vim apache-rocketmq/conf/product/broker-a-slave.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmqHome</span>=<span class="string">/usr/local/apache-rocketmq</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">10.100.1.23:9876;10.100.1.24:9876</span></span><br><span class="line"><span class="attr">brokerIP1</span>=<span class="string">10.100.1.23</span></span><br><span class="line"><span class="attr">brokerIP2</span>=<span class="string">10.100.1.23</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">mq_a</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ProductCluster</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">clusterTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">brokerTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq_data/store</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq_data/store/commitlog/</span></span><br><span class="line"><span class="attr">storePathConsumerQueue</span>=<span class="string">/usr/local/rocketmq_data/store/consumequeue/</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">6000000</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">75</span></span><br><span class="line"><span class="attr">fileReserverdTime</span>=<span class="string">72</span></span><br><span class="line"><span class="attr">haListenPort</span>=<span class="string">10912</span></span><br><span class="line"><span class="attr">haSendHeartbeatInterval</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">haHousekeepingInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="attr">haTransferBatchSize</span>=<span class="string">32768</span></span><br><span class="line"><span class="attr">haMasterAddress</span>=<span class="string"></span></span><br><span class="line"><span class="attr">haSlaveFallbehindMax</span>=<span class="string">268435456</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">syncFlushTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">messageDelayLevel</span>=<span class="string">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br><span class="line"><span class="attr">flushDelayOffsetInterval</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">cleanFileForciblyEnable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>jvm</code>启动参数：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/local/apache-rocketmq$ vim bin/runbroker.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this work <span class="keyword">for</span> additional information regarding copyright ownership.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(the <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">limitations under the License.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java Environment Setting</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">error_exit ()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;ERROR: $1 !!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="line">[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; error_exit &quot;Please set the JAVA_HOME variable in your environment, We need java(x64)!&quot;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JAVA=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class="line">export BASE_DIR=$(dirname $0)/..</span><br><span class="line">export CLASSPATH=.:$&#123;BASE_DIR&#125;/conf:$&#123;CLASSPATH&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JVM Configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===========================================================================================</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms32g -Xmx32g -Xmn16g&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseG1GC -XX:G1HeapRegionSize=32m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -verbose:gc -Xloggc:/dev/shm/mq_gc_%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=15g&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;JAVA_HOME&#125;/jre/lib/ext:$&#123;BASE_DIR&#125;/lib&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;</span><br><span class="line"></span><br><span class="line">numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">if [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; then</span><br><span class="line">numactl --interleave=all $JAVA $&#123;JAVA_OPT&#125; $@</span><br><span class="line">else</span><br><span class="line">numactl --cpunodebind=$RMQ_NUMA_NODE --membind=$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">JAVA <span class="variable">$&#123;JAVA_OPT&#125;</span> <span class="variable">$@</span></span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>和<em><strong>master</strong></em>一样制作systemd 服务并启动</li></ul><h4 id="部署broker-b"><a href="#部署broker-b" class="headerlink" title="部署broker-b"></a>部署broker-b</h4><p>在<code>10.100.1.22</code>上部署<em><strong>master</strong></em>，在<code>10.100.1.24</code>上部署<em><strong>slave</strong></em>，方式和<em><strong>broker-a</strong></em>一样，只需要注意修改ip地址就可以了。</p><p>这样，到这里为止，MQ的部署就完成了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接着上篇文章，现在开始部署RocketMQ集群，采用的部署方案是阿里推荐的两主两从异步刷盘的模式，因此准备了四台服务器来进行MQ集群的部署，以下是部署过程中的一些记录，&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="https://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="jdk" scheme="https://blog.jobshen.com/tags/jdk/"/>
    
    <category term="rocketmq" scheme="https://blog.jobshen.com/tags/rocketmq/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7下常见中间件环境的安装（一）</title>
    <link href="https://blog.jobshen.com/posts/3011500279.html"/>
    <id>https://blog.jobshen.com/posts/3011500279.html</id>
    <published>2017-12-07T12:54:37.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<p>​最近由于公司要切换IDC机房，新机房的服务器集群需要重新部署生产环境，于是又趁着这次机会把一些常用的中间件又重新部署了一次，版本有更新，部署方式也会有小变动，于是就有了这一系列的文档。整个系列主要是java运行环境下的中间件部署，也含有少量其他中间件的部署，像 <strong>Redis</strong>、 <strong>TiDB</strong> 等。</p><span id="more"></span><h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><p>jdk当然是必不可少的，任何java程序允许都不能脱离JVM环境，而通过jdk安装jvm是最常见的方式，由于一些原因，公司在生产环境并没有使用 <em>open-jdk</em> 而是仍然使用了 <em>oralce-jdk</em> ，因此就不能通过 <code>yum install open-jdk</code>的方式来安装了，只能通过下载 <em>rpm</em> 文件来进行安装。</p><h3 id="jdk下载"><a href="#jdk下载" class="headerlink" title="jdk下载"></a>jdk下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.rpm&quot;</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ rpm -ivh jdk-8u151-linux-x64.rpm</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ vim /etc/profile</span><br><span class="line">// 在末尾添加以下内容</span><br><span class="line">export JAVA_HOME=/usr/java/latest</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">// 保存 使其生效</span><br><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-集群安装"><a href="#Zookeeper-集群安装" class="headerlink" title="Zookeeper 集群安装"></a>Zookeeper 集群安装</h2><h3 id="集群机器信息"><a href="#集群机器信息" class="headerlink" title="集群机器信息"></a>集群机器信息</h3><table><thead><tr><th align="center">IP</th><th align="center">Port</th><th align="center">myid</th></tr></thead><tbody><tr><td align="center">10.100.1.11</td><td align="center">2181 2888 3888</td><td align="center">1</td></tr><tr><td align="center">10.100.1.12</td><td align="center">2181 2888 3888</td><td align="center">2</td></tr><tr><td align="center">10.100.1.13</td><td align="center">2181 2888 3888</td><td align="center">3</td></tr><tr><td align="center">10.100.1.14</td><td align="center">2181 2888 3888</td><td align="center">4</td></tr><tr><td align="center">10.100.1.15</td><td align="center">2181 2888 3888</td><td align="center">5</td></tr></tbody></table><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ curl -O https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/stable/zookeeper-3.4.10.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/mnt/d/download/softwares$ tar -zxf zookeeper-3.4.10.tar.gz -C /usr/local</span><br><span class="line">jobshen@JobShen-PC:/usr/lcoal$ mkdir -p zk_data/zookeeper zk_data/zoo-logs</span><br></pre></td></tr></table></figure><h3 id="新建zoo-cfg"><a href="#新建zoo-cfg" class="headerlink" title="新建zoo.cfg"></a>新建zoo.cfg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@JobShen-PC:/usr/lcoal$ vim zookeeper-3.4.10/conf/zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/local/zk_data/zookeeper</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">/usr/local/zk_data/zoo-logs</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">10.100.1.11:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">10.100.1.12:2888:3888</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">10.100.1.13:2888:3888</span></span><br><span class="line"><span class="attr">server.4</span>=<span class="string">10.100.1.14:2888:3888</span></span><br><span class="line"><span class="attr">server.5</span>=<span class="string">10.100.1.15:2888:3888</span></span><br></pre></td></tr></table></figure><h3 id="新建myid"><a href="#新建myid" class="headerlink" title="新建myid"></a>新建myid</h3><p>分别在各台机器上，新建对于<em>myid</em>值的<code>myid</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobshen@10.100.1.11:/usr/lcoal$ echo &quot;1&quot; &gt; /usr/local/zk_data/zookeeper/myid</span><br><span class="line">jobshen@10.100.1.12:/usr/lcoal$ echo &quot;2&quot; &gt; /usr/local/zk_data/zookeeper/myid</span><br><span class="line">jobshen@10.100.1.13:/usr/lcoal$ echo &quot;3&quot; &gt; /usr/local/zk_data/zookeeper/myid</span><br><span class="line">jobshen@10.100.1.14:/usr/lcoal$ echo &quot;4&quot; &gt; /usr/local/zk_data/zookeeper/myid</span><br><span class="line">jobshen@10.100.1.15:/usr/lcoal$ echo &quot;5&quot; &gt; /usr/local/zk_data/zookeeper/myid</span><br></pre></td></tr></table></figure><h3 id="制作Systemd脚本"><a href="#制作Systemd脚本" class="headerlink" title="制作Systemd脚本"></a>制作Systemd脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@10.100.1.11:/usr/lcoal$ vim /lib/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">zookeeper</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">network.target</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">JAVA_HOME=/usr/java/default</span></span><br><span class="line"><span class="attr">PIDFile</span>=<span class="string">/usr/local/zk_data/zookeeper/zookeeper_server.pid</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/local/zookeeper-3.4.10/bin/zkServer.sh start</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/usr/local/zookeeper-3.4.10/bin/zkServer.sh stop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@10.100.1.11:/usr/lcoal$ ln -s /etc/systemd/system/zookeeper.service /lib/systemd/system/zookeeper.service</span><br><span class="line">jobshen@10.100.1.11:/usr/lcoal$ systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="启动zk集群"><a href="#启动zk集群" class="headerlink" title="启动zk集群"></a>启动zk集群</h3><p>在各个节点上分别启动zk：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobshen@10.100.1.11:/usr/lcoal$ systemctl start zookeeper</span><br></pre></td></tr></table></figure><p>检查zk是否启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobshen@10.100.1.11:/usr/lcoal$ cd zookeeper-3.4.10/bin</span><br><span class="line">jobshen@10.100.1.11:/usr/lcoal/zookeeper-3.4.10/bin$ ./zkServer.sh status</span><br></pre></td></tr></table></figure><p>输出以下内容即代表启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower(master)</span><br></pre></td></tr></table></figure><p>下篇文章将继续介绍 <em>RocketMQ</em>、 <em>Redis</em> 等集群的安装</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	最近由于公司要切换IDC机房，新机房的服务器集群需要重新部署生产环境，于是又趁着这次机会把一些常用的中间件又重新部署了一次，版本有更新，部署方式也会有小变动，于是就有了这一系列的文档。整个系列主要是java运行环境下的中间件部署，也含有少量其他中间件的部署，像 &lt;strong&gt;Redis&lt;/strong&gt;、 &lt;strong&gt;TiDB&lt;/strong&gt; 等。&lt;/p&gt;</summary>
    
    
    
    <category term="centos7" scheme="https://blog.jobshen.com/categories/centos7/"/>
    
    
    <category term="Centos" scheme="https://blog.jobshen.com/tags/Centos/"/>
    
    <category term="jdk" scheme="https://blog.jobshen.com/tags/jdk/"/>
    
    <category term="zookeeper" scheme="https://blog.jobshen.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上Redis故障恢复和分析（二）</title>
    <link href="https://blog.jobshen.com/posts/1461710894.html"/>
    <id>https://blog.jobshen.com/posts/1461710894.html</id>
    <published>2017-09-21T12:08:56.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常场景"><a href="#异常场景" class="headerlink" title="异常场景"></a>异常场景</h2><p>最近一段时间时不时就有开发人员向我反应：redis的key有点问题，帮我删个key值、怎么key没有过期，我明明设了过期时间的。一开始没有放心上，以为只是程序逻辑处理不当或者redis偶尔抽风，不用在意。可是渐渐反应的人多了，觉得可能不是这么简单了，于是就和相关的开发人员讨论了下，发现会出现异常的基本是以下两种场景：</p><span id="more"></span><ul><li><p>使用redis 的 <strong>incrBy</strong> 命令来防止重复提交，大致的redis交互如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">incrBy key 1 <span class="comment"># 返回 1 表示正常 返回 &gt; 1  表示重复提交 直接 return</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">expire key 5 <span class="comment"># 5秒后过期</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">del key <span class="comment"># 正常业务逻辑走完后 显示删除key</span></span></span><br></pre></td></tr></table></figure></li><li><p>使用 redis （<strong>set</strong>  <strong>setnx</strong> **setex **） +  <strong>expire</strong> 组合命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">set</span> |setnx | setex key</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">expire key seconds <span class="comment"># 设置失败</span></span></span><br></pre></td></tr></table></figure><p>由于系统中大量使用了第一种方式来防止重复提交，所以这个问题对业务影响还是很大的，redis具体现象为：</p><ul><li>设置incrby 第一次应该返回 <strong>1</strong> </li><li>实际上却返回了 <strong>2</strong> ，导致业务流程无法走完，并且key没有删除也没有设置过期时间</li></ul></li></ul><h2 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h2><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>为了排查问题写了一个简单的小程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Long&gt; list = Lists.newArrayListWithCapacity(<span class="number">5000000</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">first_id</span> <span class="operator">=</span> <span class="number">500000000000000001L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</span><br><span class="line">        list.add(first_id++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">allDone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// incrby</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    testIncrby(list);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                allDone.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    testIncrByAndDel(list);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                allDone.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ).start();</span><br><span class="line"></span><br><span class="line">    allDone.await();</span><br><span class="line">    log.info(<span class="string">&quot;finish method test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelAndTTL</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Long&gt; list = Lists.newArrayListWithCapacity(<span class="number">5000000</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">first_id</span> <span class="operator">=</span> <span class="number">500000000000000001L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</span><br><span class="line">        list.add(first_id++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">allDone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                testDelAndTTL(list, <span class="string">&quot;walletMember&quot;</span>);</span><br><span class="line">                allDone.countDown();</span><br><span class="line">                log.info(<span class="string">&quot;finish walletMember keys&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                testDelAndTTL(list, <span class="string">&quot;walletMember1&quot;</span>);</span><br><span class="line">                allDone.countDown();</span><br><span class="line">                log.info(<span class="string">&quot;finish walletMember1 keys&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ).start();</span><br><span class="line"></span><br><span class="line">    allDone.await();</span><br><span class="line">    log.info(<span class="string">&quot;finish all keys&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testIncrby</span><span class="params">(<span class="keyword">final</span> List&lt;Long&gt; list)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        times ++;</span><br><span class="line">        <span class="keyword">for</span> (Long key : list) &#123;</span><br><span class="line">            Optional&lt;Long&gt; value = redisOperator.incrBy(<span class="string">&quot;walletMember&quot;</span> + key, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (value.isPresent()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.get() != <span class="number">1L</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;there is something wrong in &#123;&#125;: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrby&quot;</span>, <span class="number">1</span>, value.get(), <span class="string">&quot;walletMember&quot;</span> + key);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;there is something wrong in &#123;&#125;: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrby&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;walletMember&quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">            Optional&lt;Boolean&gt; isSuccess = redisOperator.expire(<span class="string">&quot;walletMember&quot;</span> + key, <span class="number">30</span>);</span><br><span class="line">            <span class="keyword">if</span> (!isSuccess.isPresent() || !isSuccess.get()) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;there is something wrong in &#123;&#125;: the expire method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrby&quot;</span>, <span class="string">&quot;true&quot;</span>, (isSuccess.isPresent() ? isSuccess.get() : <span class="literal">null</span>), <span class="string">&quot;walletMember&quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;finish &#123;&#125; method &#123;&#125; times. sleep 35 seconds&quot;</span>, <span class="string">&quot;testIncrby&quot;</span>, times);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">5</span>*<span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">if</span>(times &gt; <span class="number">1000000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testIncrByAndDel</span><span class="params">(<span class="keyword">final</span> List&lt;Long&gt; list)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        times ++;</span><br><span class="line">        <span class="keyword">for</span> (Long key : list) &#123;</span><br><span class="line">            Optional&lt;Long&gt; value = redisOperator.incrBy(<span class="string">&quot;walletMember1&quot;</span>+key, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(value.isPresent()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(value.get() != <span class="number">1L</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;there is something wrong in &#123;&#125; method: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrByAndDel&quot;</span>, <span class="number">1</span>, value.get(), <span class="string">&quot;walletMember1&quot;</span> + key);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;there is something wrong in &#123;&#125; method: the incrBy method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrByAndDel&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;walletMember1&quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">            Optional&lt;Boolean&gt; isSuccess= redisOperator.expire(<span class="string">&quot;walletMember&quot;</span>+key, <span class="number">60</span>);</span><br><span class="line">            <span class="keyword">if</span>(!isSuccess.isPresent() || !isSuccess.get()) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;there is something wrong in &#123;&#125;: the expire method return wrong value, expact : &#123;&#125; , result : &#123;&#125;, key : &#123;&#125;&quot;</span>, <span class="string">&quot;testIncrByAndDel&quot;</span>, <span class="string">&quot;true&quot;</span>, (isSuccess.isPresent() ? isSuccess.get() : <span class="literal">null</span>), <span class="string">&quot;walletMember1&quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">            redisOperator.del(<span class="string">&quot;walletMember1&quot;</span>+key);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;finish &#123;&#125; method &#123;&#125; times. sleep 35 seconds&quot;</span>, <span class="string">&quot;testIncrByAndDel&quot;</span>, times);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">5</span>*<span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">if</span>(times &gt; <span class="number">1000000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testDelAndTTL</span><span class="params">(<span class="keyword">final</span> List&lt;Long&gt; list, String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long key : list) &#123;</span><br><span class="line">        Optional&lt;Integer&gt; value = redisOperator.get(prefix + key, Integer.class);</span><br><span class="line">        <span class="keyword">if</span>(value.isPresent()) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> redisOperator.getFastJsonRedisTemplate().getExpire(prefix + key);</span><br><span class="line">        log.error(<span class="string">&quot;there is something wrong : key : &#123;&#125;, value : &#123;&#125;, ttl : &#123;&#125;&quot;</span>, prefix + key, value.get(), ttl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可能是测试用例写的不好，线上线下都没有发现明显的问题，于是对代码做了调整：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; keys = Lists.newArrayListWithCapacity(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/redis&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createGoogleAuth</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">numThreads</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(numThreads);</span><br><span class="line">        log.info(<span class="string">&quot;--------------start------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            threadPool.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    redis_incrby();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">redis_incrby</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">loops</span> <span class="operator">=</span> <span class="number">2500</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        keys.add(key);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;loops;j++) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, return : &#123;&#125;&quot;</span>, key, stringRedisTemplate.opsForValue().increment(key, <span class="number">1</span>));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, expire : &#123;&#125;&quot;</span>, key, stringRedisTemplate.expire(key, <span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, return : &#123;&#125;&quot;</span>, key, stringRedisTemplate.opsForValue().increment(key, <span class="number">1</span>));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, expire : &#123;&#125;&quot;</span>, key, stringRedisTemplate.expire(key, <span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, return : &#123;&#125;&quot;</span>, key, stringRedisTemplate.opsForValue().increment(key, <span class="number">1</span>));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, expire : &#123;&#125;&quot;</span>, key, stringRedisTemplate.expire(key, <span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, return : &#123;&#125;&quot;</span>, key, stringRedisTemplate.opsForValue().increment(key, <span class="number">1</span>));</span><br><span class="line">            log.info(<span class="string">&quot;key : &#123;&#125;, expire : &#123;&#125;&quot;</span>, key, stringRedisTemplate.expire(key, <span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        log.info(<span class="string">&quot;key : &#123;&#125;, finish.&quot;</span>, key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行几次后终于发现了问题：按照代码逻辑，每个<strong>key</strong>最后的<strong>value</strong>应该都为<strong>10000</strong>，然后有的key的结果大于10000，于是想到两种情况：</p><ul><li>1）客户端多发送了一次命令</li><li>2）redis 执行错误</li></ul><h3 id="验证原因"><a href="#验证原因" class="headerlink" title="验证原因"></a>验证原因</h3><p>为了验证到底是哪种原因，采取了以下方式：</p><ul><li><p>修改Jedis 源码：修改<strong>BinaryClient</strong>的<strong>incrBy</strong>方法，打印日志信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrBy</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] key, <span class="keyword">final</span> <span class="type">long</span> integer)</span> &#123;</span><br><span class="line">  log.error(<span class="string">&quot;key: &#123;&#125;, delta : &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(key), integer);</span><br><span class="line">  sendCommand(INCRBY, key, toByteArray(integer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对redis进行监听，使用<strong>watch</strong>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -c -h ip -p port watch</span><br></pre></td></tr></table></figure></li><li><p>通过<strong>tcpdump</strong> 对所有流量记录进行保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -s 0 -w tcp.cap # 保存为.cap文件可以通过wireshark 进行分析</span><br></pre></td></tr></table></figure></li></ul><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>通过重新执行上面的测试代码，对日志文件进行筛选：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 10001 nohup.out</span><br></pre></td></tr></table></figure><p>从中选取一个key：<strong>3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8</strong></p><p>然后继续筛选：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;key : 3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8 return : &quot; nohup.out</span><br></pre></td></tr></table></figure><p>仔细查看后发现：</p><p><img data-src="https://pic.jobshen.com/2022/05/b616d89ac815bebb525b18313621ab74.png" alt="value跳跃"></p><p>直接从 <strong>2698</strong> 跳跃到了 <strong>2700</strong></p><p>然后再筛选日志，发现以下内容：</p><p><img data-src="https://pic.jobshen.com/2022/05/124aff5eb3a54aa3c4f52c9a748a1655.png" alt="重复"></p><p>连续执行了两次<strong>incrBy</strong>命令，然后再去查找同一时刻的redis watch记录，发现的确收到了两条<strong>INCRBY  3e9dd73a-fee2-416c-b3c8-5369b2cd4ec8 1</strong>命令，那接下来就要搞清楚为什么会发起两次请求，于是轮到tcpdump了。</p><h3 id="wireshark-分析请求流量"><a href="#wireshark-分析请求流量" class="headerlink" title="wireshark 分析请求流量"></a>wireshark 分析请求流量</h3><p>将tcpdump的文件导入wireshark后，根据筛选条件进行筛选，最终找到了对应的tcp请求（Frame 698961）：</p><p><img data-src="https://pic.jobshen.com/2022/05/4d290a8c7f8cc6a82e63b814a8b48a64.png" alt="wireshark"></p><p>其中这行引起了我注意：**[Expert Info (Note&#x2F;Sequence): This frame is a (suspected) retransmission]**</p><p>查询资料后发现，这种情况是出现在以下情形：</p><p>​当tcp请求允许重试的前提下发现当前tcp请求过了<strong>timeout</strong>时间还没收到返回值，那么就发起一次重试，而重试的tcp请求在wireshark中就会被标记为**[Expert Info (Note&#x2F;Sequence): This frame is a (suspected) retransmission]**。</p><p>于是原因很明显了，由于Jedis设置的超时时间过短，导致jedis发起了重试，最终导致了上述redis的异常情况。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>查询jedis配置文件，发现超时时间为500毫秒，</p><p><img data-src="https://pic.jobshen.com/2022/05/216c3edac48fd216cad893e868e17372.png" alt="jedis"></p><p>显然太短了，遂改为15秒，改完以下重新执行了几次测试程序，都没有再发现问题，然后修改线上代码。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>导致上述jedis请求超时的原因也有redis cluster的原因。查询发现线上集群存在这key分布不均匀的情况：</p><p><img data-src="https://pic.jobshen.com/2022/05/25c23bd7e51142a032731d008ca0fc09.png" alt="redis-key"></p><p>可以看出其中一个节点的key数量是其他节点的1.5倍，并且分析这些key发现他们访问的频率也很高，在一定程度上导致了jedis的超时，因此接下来要对redis集群进行优化。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常场景&quot;&gt;&lt;a href=&quot;#异常场景&quot; class=&quot;headerlink&quot; title=&quot;异常场景&quot;&gt;&lt;/a&gt;异常场景&lt;/h2&gt;&lt;p&gt;最近一段时间时不时就有开发人员向我反应：redis的key有点问题，帮我删个key值、怎么key没有过期，我明明设了过期时间的。一开始没有放心上，以为只是程序逻辑处理不当或者redis偶尔抽风，不用在意。可是渐渐反应的人多了，觉得可能不是这么简单了，于是就和相关的开发人员讨论了下，发现会出现异常的基本是以下两种场景：&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://blog.jobshen.com/categories/redis/"/>
    
    
    <category term="Redis" scheme="https://blog.jobshen.com/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="https://blog.jobshen.com/tags/Redis-Cluster/"/>
    
    <category term="Jedis" scheme="https://blog.jobshen.com/tags/Jedis/"/>
    
    <category term="Wireshark" scheme="https://blog.jobshen.com/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上Redis故障恢复和分析（一）</title>
    <link href="https://blog.jobshen.com/posts/1728650486.html"/>
    <id>https://blog.jobshen.com/posts/1728650486.html</id>
    <published>2017-09-20T14:37:20.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>那天早上一到公司就有客服过来反应我们的App登录不了了，我赶紧试了一下登陆App，发现是可以登录的，就以为是个别现象没有在意。过了一会儿客服来反应更频繁了，这才意识到可能没有那么简单。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一开始认为是服务器问题，检查了所有相关的应用服务器，应用是否正在运行，发现一切正常，cpu、内存、IO 都是正常的，没有异常；</p><p>然后考虑是否是代码层面问题（数据库问题被排除，因为一旦数据库出问题不可能只有一部分人受影响），于是去检查日志，发现有以下错误信息：</p><p><img data-src="https://pic.jobshen.com/2022/05/8812fd38a1b9383d9c3a62b7e2f3d5b4.png" alt="错误信息"></p><p>然后登陆redis控制台，一台一台测试，终于发现了有问题的那台机器：</p><p><img data-src="https://pic.jobshen.com/2022/05/62b4852cc6a7d1c4370529cf0a32f18c.png" alt="发现问题"></p><p>接下来要做的就很简单了，redis是集群部署，并且每个节点都有master-slave，因此直接kill该节点，问题修复，一切正常。</p><h2 id="寻找根本原因"><a href="#寻找根本原因" class="headerlink" title="寻找根本原因"></a>寻找根本原因</h2><p>但是这样做并不能解决根本问题，由于之前部署redis集群时考虑不够周全，没有配置redis日志，因此决定直接修改配置文件，逐个重启redis节点。这也就导致了再次故障，因为那个故障节点又被启动加入集群并且由于所有节点都经历了重启该节点又被设为master了。</p><p>这时去观察该节点redis的日志，终于发现了问题，满屏都是异常信息：</p><p> <strong>Can’t save in background: fork: Cannot allocate memory</strong>  </p><p>通过Google得知是由于机器内存不足导致的，遂检查机器内存，发现内存已被占用超过90%，于是赶紧增大机器内存，毕竟redis 数据都是存储在内存中，才能做到这么快的读写。</p><p>基于此，对整个redis集群的内存占用情况进行了一次排查，增大了机器内存，并且增加了对机器内存使用情况的监控防止再出现此类情况。</p><h2 id="又一个问题"><a href="#又一个问题" class="headerlink" title="又一个问题"></a>又一个问题</h2><p>好景不长，一个问题解决又来一个问题，对于redis操作出现了非预期结果，类似 incrBy +1 结果+2，执行expire 结果返回失败。</p><p>该问题的跟踪解决将在下一篇文章中介绍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;那天早上一到公司就有客服过来反应我们的App登录不了了，我赶紧试了一下登陆App，发现是可以登录的，就以为是个别现象没有在意。过了一会儿客服来反应更频繁了，这才意识到可能没有那么简单。&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://blog.jobshen.com/categories/redis/"/>
    
    
    <category term="Redis" scheme="https://blog.jobshen.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo和Github Page搭建个人Blog</title>
    <link href="https://blog.jobshen.com/posts/3873148614.html"/>
    <id>https://blog.jobshen.com/posts/3873148614.html</id>
    <published>2017-09-17T10:44:56.000Z</published>
    <updated>2022-08-27T14:34:03.688Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用wordpress在AWS上搭建的博客，但国内访问速度堪忧，而且费用也不少，于是觉得切到Github上，最终觉得通过Hexo和Github Page重新搭建博客，这篇文章只是为了记录搭建的过程，以防以后忘记（记性不好啊。。。）</p><span id="more"></span><h2 id="注册域名并绑定Github-Page"><a href="#注册域名并绑定Github-Page" class="headerlink" title="注册域名并绑定Github Page"></a>注册域名并绑定Github Page</h2><p>注册Github和域名就不多说了，网上一搜一大推，接着去Github新建一个仓库，名为个人ID加 <strong>github.io</strong>，例如我的就是kitdine.github.io:</p><p><img data-src="https://pic.jobshen.com/2022/05/183f9140e36ef699f77be643a57bde4e.png" alt="img"></p><p>然后在该仓库下找到一个文件 <strong>CNAME</strong>， 打开后将里面的值修改为你博客的域名，例如我的 <strong>blog.jobshen.com</strong></p><p><img data-src="https://pic.jobshen.com/2022/05/8f1dc53332eea6b04be5c4745ed29360.png" alt="img"></p><p>注册完域名后添加一条CNAME记录，然后解析到github Page的地址，我的域名是在Godaddy上注册，添加一个CNAME指向github.io，像这样：</p><p><img data-src="https://pic.jobshen.com/2022/05/9ec00301e8bc48597d49aa5f8ea8f057.png" alt="img"></p><p>这样你就可以通过自己的域名访问GitHub Page了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>之所以选择Hexo是因为Hexo看上去非常简洁而且支持Markdown，符合我的期望，安装也很方便。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Hexo 需要NodeJ.js和git</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm">nvm</a>。</p><p>cURL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span></span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span></span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvm install stable</span></span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/">安装程序</a> 来安装。</p><blockquote><p>Windows 用户</p><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><h4 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration.html">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="http://embeddedjs.com/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing.html">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes.html">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="NexT-主题"><a href="#NexT-主题" class="headerlink" title="NexT 主题"></a>NexT 主题</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 <a href="http://git-scm.com/">Git</a>， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p><ul><li>克隆最新版本</li></ul><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆&#x2F;下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p><p>启用 NexT 主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><p><img data-src="https://pic.jobshen.com/2022/05/9d8150ade97e843cd393633de0cc12dd.png" alt="img"></p><p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p><p>更多配置可以访问<a href="http://theme-next.iissnan.com/">NexT</a>获取。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>你可以执行下列命令来创建一篇新文章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>不要处理我的文章</p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>修改 <code>_config.yml</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: path/to/your/github/resp # 指向本地仓库，方便提交</span><br></pre></td></tr></table></figure><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前使用wordpress在AWS上搭建的博客，但国内访问速度堪忧，而且费用也不少，于是觉得切到Github上，最终觉得通过Hexo和Github Page重新搭建博客，这篇文章只是为了记录搭建的过程，以防以后忘记（记性不好啊。。。）&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="https://blog.jobshen.com/categories/hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.jobshen.com/tags/Hexo/"/>
    
    <category term="Github Page" scheme="https://blog.jobshen.com/tags/Github-Page/"/>
    
  </entry>
  
</feed>
